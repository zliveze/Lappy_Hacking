import os
import sys
import configparser
from colorama import Fore, Style
from utils import get_user_documents_path

# Emoji cho c√°c th√¥ng b√°o
EMOJI = {
    "INFO": "‚ÑπÔ∏è",
    "WARNING": "‚ö†Ô∏è",
    "ERROR": "‚ùå",
    "SUCCESS": "‚úÖ",
    "ADMIN": "üîí",
    "ARROW": "‚û°Ô∏è",
    "USER": "üë§",
    "KEY": "üîë",
    "SETTINGS": "‚öôÔ∏è",
    "RESET": "üîÑ",
    "FILE": "üìÑ",
    "BACKUP": "üíæ",
    "VERSION": "üè∑Ô∏è"
}

# Bi·∫øn l∆∞u tr·ªØ c·∫•u h√¨nh to√†n c·ª•c
_config_cache = None

def get_config():
    """L·∫•y c·∫•u h√¨nh t·ª´ file config.ini ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i"""
    global _config_cache
    
    # N·∫øu ƒë√£ c√≥ cache, tr·∫£ v·ªÅ lu√¥n
    if _config_cache is not None:
        return _config_cache
    
    # T·∫°o th∆∞ m·ª•c c·∫•u h√¨nh n·∫øu ch∆∞a t·ªìn t·∫°i
    config_dir = os.path.join(get_user_documents_path(), ".lappy-lab")
    os.makedirs(config_dir, exist_ok=True)
    
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
    config_file = os.path.join(config_dir, "config.ini")
    
    # T·∫°o ƒë·ªëi t∆∞·ª£ng ConfigParser
    config = configparser.ConfigParser()
    
    # N·∫øu file c·∫•u h√¨nh ƒë√£ t·ªìn t·∫°i, ƒë·ªçc n√≥
    if os.path.exists(config_file):
        config.read(config_file)
    
    # N·∫øu kh√¥ng, t·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
    else:
        # C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        default_config = {
            'General': {
                'version': '4.0',
                'release_date': '23/04/2025',
                'check_update': 'True'
            },
            'WindowsPaths': {
                'storage_path': os.path.join(os.getenv("APPDATA", ""), "Cursor", "User", "globalStorage", "storage.json"),
                'sqlite_path': os.path.join(os.getenv("APPDATA", ""), "Cursor", "User", "globalStorage", "state.vscdb"),
                'machine_id_path': os.path.join(os.getenv("APPDATA", ""), "Cursor", "machineId"),
                'cursor_path': os.path.join(os.getenv("LOCALAPPDATA", ""), "Programs", "Cursor", "resources", "app"),
                'updater_path': os.path.join(os.getenv("LOCALAPPDATA", ""), "cursor-updater"),
                'update_yml_path': os.path.join(os.getenv("LOCALAPPDATA", ""), "Programs", "Cursor", "resources", "app-update.yml"),
                'product_json_path': os.path.join(os.getenv("LOCALAPPDATA", ""), "Programs", "Cursor", "resources", "app", "product.json")
            },
            'UI': {
                'theme': 'xp',
                'log_max_lines': '1000'
            }
        }
        
        # Th√™m c√°c ph·∫ßn v√†o config
        for section, options in default_config.items():
            if not config.has_section(section):
                config.add_section(section)
            for option, value in options.items():
                config.set(section, option, value)
        
        # L∆∞u c·∫•u h√¨nh v√†o file
        with open(config_file, 'w') as f:
            config.write(f)
    
    # L∆∞u v√†o cache
    _config_cache = config
    
    return config

def save_config(config):
    """L∆∞u c·∫•u h√¨nh v√†o file"""
    config_dir = os.path.join(get_user_documents_path(), ".lappy-lab")
    config_file = os.path.join(config_dir, "config.ini")
    
    with open(config_file, 'w') as f:
        config.write(f)
    
    # C·∫≠p nh·∫≠t cache
    global _config_cache
    _config_cache = config

def print_config(config):
    """In c·∫•u h√¨nh ra m√†n h√¨nh"""
    print(f"\n{Fore.CYAN}{'='*50}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{EMOJI['SETTINGS']} C·∫•u h√¨nh hi·ªán t·∫°i:{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'='*50}{Style.RESET_ALL}")
    
    for section in config.sections():
        print(f"\n{Fore.YELLOW}[{section}]{Style.RESET_ALL}")
        for option in config.options(section):
            value = config.get(section, option)
            print(f"{Fore.GREEN}{option}{Style.RESET_ALL} = {Fore.CYAN}{value}{Style.RESET_ALL}")
    
    print(f"\n{Fore.CYAN}{'='*50}{Style.RESET_ALL}")
