# features/augment_clean_database.py - Clean VSCode Database
import sqlite3
import base64
from pathlib import Path

try:
    from .augment_utils import get_vscode_files, decode_base64_key, get_file_info
except ImportError:
    # Fallback functions
    def get_vscode_files():
        return []
    def decode_base64_key(key):
        try:
            return base64.b64decode(key).decode('utf-8')
        except:
            return None
    def get_file_info(path):
        return None

def clean_vscode_database():
    """Clean VSCode database ƒë·ªÉ x√≥a d·ªØ li·ªáu Augment"""
    try:
        vscode_files = get_vscode_files()
        if not vscode_files:
            return False, "Kh√¥ng t√¨m th·∫•y VSCode installations"

        # Decode c√°c query t·ª´ base64 (nh∆∞ trong Augment VIP)
        count_query = decode_base64_key("U0VMRUNUIENPVU5UKCopIEZST00gSXRlbVRhYmxlIFdIRVJFIGtleSBMSUtFICclYXVnbWVudCUnOw==")
        delete_query = decode_base64_key("REVMRVRFIEZST00gSXRlbVRhYmxlIFdIRVJFIGtleSBMSUtFICclYXVnbWVudCUnOw==")

        if not count_query or not delete_query:
            return False, "Kh√¥ng th·ªÉ decode database queries"

        results = []
        success_count = 0
        total_deleted = 0

        results.append("üîç CLEAN VSCODE DATABASE - Theo logic Augment VIP")
        results.append("üìã Query: SELECT COUNT(*) FROM ItemTable WHERE key LIKE '%augment%'")
        results.append("")

        for vscode_path in vscode_files:
            try:
                # T√¨m file state.vscdb
                db_files = find_database_files(vscode_path)

                for db_file in db_files:
                    try:
                        deleted_count = clean_single_database(db_file, count_query, delete_query, results)
                        if deleted_count >= 0:
                            success_count += 1
                            total_deleted += deleted_count
                    except Exception as e:
                        results.append(f"‚ùå L·ªói x·ª≠ l√Ω {db_file}: {str(e)}")

            except Exception as e:
                results.append(f"‚ùå L·ªói x·ª≠ l√Ω {vscode_path}: {str(e)}")

        # Th√™m th√¥ng tin t·ªïng k·∫øt
        results.append("")
        results.append("üìä T·ªîNG K·∫æT:")
        results.append(f"   Databases ƒë√£ ki·ªÉm tra: {success_count}")
        results.append(f"   Entries ƒë√£ x√≥a: {total_deleted}")

        if total_deleted == 0:
            results.append("")
            results.append("‚ÑπÔ∏è TH√îNG TIN: Kh√¥ng c√≥ entries n√†o ch·ª©a 'augment' - ƒë√¢y l√† b√¨nh th∆∞·ªùng!")
            results.append("üí° Database VSCode th∆∞·ªùng kh√¥ng c√≥ entries 'augment' s·∫µn")
            results.append("‚úÖ Tool ƒë√£ ho·∫°t ƒë·ªông ƒë√∫ng theo logic Augment VIP g·ªëc")

        message = "\n".join(results)
        return True, message  # Lu√¥n return True v√¨ ƒë√¢y l√† h√†nh vi b√¨nh th∆∞·ªùng

    except Exception as e:
        return False, f"L·ªói clean VSCode database: {str(e)}"

def find_database_files(vscode_path):
    """T√¨m c√°c file database trong th∆∞ m·ª•c VSCode"""
    db_files = []
    
    try:
        # T√¨m state.vscdb trong th∆∞ m·ª•c hi·ªán t·∫°i
        state_db = vscode_path / "state.vscdb"
        if state_db.exists():
            db_files.append(state_db)
        
        # T√¨m state.vscdb.backup
        backup_db = vscode_path / "state.vscdb.backup"
        if backup_db.exists():
            db_files.append(backup_db)
        
        # T√¨m trong c√°c th∆∞ m·ª•c con n·∫øu l√† th∆∞ m·ª•c globalStorage
        if vscode_path.is_dir() and "globalStorage" in str(vscode_path):
            for item in vscode_path.iterdir():
                if item.is_file() and item.name.endswith(".vscdb"):
                    db_files.append(item)
                elif item.is_dir():
                    # T√¨m trong th∆∞ m·ª•c con
                    for sub_item in item.iterdir():
                        if sub_item.is_file() and sub_item.name.endswith(".vscdb"):
                            db_files.append(sub_item)
    
    except Exception:
        pass
    
    return db_files

def clean_single_database(db_file, count_query, delete_query, results):
    """Clean m·ªôt database file"""
    try:
        if not db_file.exists():
            return -1

        # L·∫•y th√¥ng tin file
        file_info = get_file_info(db_file)
        results.append(f"üìÅ Database: {db_file.name}")
        results.append(f"   Path: {db_file}")
        if file_info:
            results.append(f"   Size: {file_info['size_formatted']}")

        # K·∫øt n·ªëi database
        conn = sqlite3.connect(str(db_file))
        cursor = conn.cursor()

        try:
            # Ki·ªÉm tra tables
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            table_names = [t[0] for t in tables]
            results.append(f"   Tables: {table_names}")

            # Ki·ªÉm tra ItemTable
            if 'ItemTable' not in table_names:
                results.append(f"   ‚ö†Ô∏è Kh√¥ng c√≥ ItemTable - b·ªè qua")
                return 0

            # ƒê·∫øm t·ªïng entries
            cursor.execute("SELECT COUNT(*) FROM ItemTable;")
            total_entries = cursor.fetchone()[0]
            results.append(f"   Total entries: {total_entries}")

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng entries c·∫ßn x√≥a
            cursor.execute(count_query)
            rows_to_delete = cursor.fetchone()[0]

            if rows_to_delete > 0:
                results.append(f"   üîç T√¨m th·∫•y {rows_to_delete} entries ch·ª©a 'augment'")

                # Hi·ªÉn th·ªã m·ªôt s·ªë entries m·∫´u
                cursor.execute("SELECT key FROM ItemTable WHERE key LIKE '%augment%' LIMIT 3;")
                sample_keys = cursor.fetchall()
                for key in sample_keys:
                    results.append(f"      - {key[0]}")

                # Th·ª±c hi·ªán x√≥a
                cursor.execute(delete_query)
                conn.commit()

                results.append(f"   ‚úÖ ƒê√£ x√≥a {rows_to_delete} entries")
                return rows_to_delete
            else:
                results.append(f"   ‚ÑπÔ∏è Kh√¥ng c√≥ entries n√†o ch·ª©a 'augment'")

                # Hi·ªÉn th·ªã m·ªôt s·ªë entries m·∫´u ƒë·ªÉ debug
                cursor.execute("SELECT key FROM ItemTable LIMIT 5;")
                sample_keys = cursor.fetchall()
                if sample_keys:
                    results.append(f"   üìã Sample keys:")
                    for key in sample_keys:
                        results.append(f"      - {key[0]}")

                return 0

        finally:
            conn.close()

    except sqlite3.Error as e:
        results.append(f"   ‚ùå L·ªói SQLite: {str(e)}")
        return -1
    except Exception as e:
        results.append(f"   ‚ùå L·ªói: {str(e)}")
        return -1

def analyze_vscode_databases():
    """Ph√¢n t√≠ch c√°c database VSCode ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin"""
    try:
        vscode_files = get_vscode_files()
        if not vscode_files:
            return False, "Kh√¥ng t√¨m th·∫•y VSCode installations"
        
        results = []
        total_databases = 0
        
        # Decode count query
        count_query = decode_base64_key("U0VMRUNUIENPVU5UKCopIEZST00gSXRlbVRhYmxlIFdIRVJFIGtleSBMSUtFICclYXVnbWVudCUnOw==")
        if not count_query:
            return False, "Kh√¥ng th·ªÉ decode count query"
        
        for vscode_path in vscode_files:
            try:
                db_files = find_database_files(vscode_path)
                
                for db_file in db_files:
                    try:
                        info = analyze_single_database(db_file, count_query)
                        if info:
                            results.append(info)
                            total_databases += 1
                    except Exception as e:
                        results.append(f"‚ùå L·ªói ph√¢n t√≠ch {db_file}: {str(e)}")
                        
            except Exception as e:
                results.append(f"‚ùå L·ªói x·ª≠ l√Ω {vscode_path}: {str(e)}")
        
        if total_databases > 0:
            header = f"üìä PH√ÇN T√çCH {total_databases} VSCode DATABASES:\n" + "=" * 60 + "\n\n"
            message = header + "\n".join(results)
            return True, message
        else:
            return False, "Kh√¥ng t√¨m th·∫•y database n√†o ƒë·ªÉ ph√¢n t√≠ch"
            
    except Exception as e:
        return False, f"L·ªói ph√¢n t√≠ch databases: {str(e)}"

def analyze_single_database(db_file, count_query):
    """Ph√¢n t√≠ch m·ªôt database file"""
    try:
        if not db_file.exists():
            return None
        
        file_info = get_file_info(db_file)
        result = f"üìÅ {db_file.name}\n"
        result += f"   Path: {db_file}\n"
        
        if file_info:
            result += f"   Size: {file_info['size_formatted']}\n"
            result += f"   Permissions: {file_info['permissions']}\n"
            result += f"   Read-only: {'Yes' if file_info['is_readonly'] else 'No'}\n"
        
        # K·∫øt n·ªëi database
        conn = sqlite3.connect(str(db_file))
        cursor = conn.cursor()
        
        try:
            # Ki·ªÉm tra tables
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            result += f"   Tables: {len(tables)}\n"
            
            # Ki·ªÉm tra entries c·∫ßn x√≥a
            cursor.execute(count_query)
            augment_entries = cursor.fetchone()[0]
            result += f"   Augment entries: {augment_entries}\n"
            
            # Ki·ªÉm tra t·ªïng s·ªë entries trong ItemTable n·∫øu c√≥
            try:
                cursor.execute("SELECT COUNT(*) FROM ItemTable;")
                total_entries = cursor.fetchone()[0]
                result += f"   Total entries: {total_entries}\n"
            except:
                pass
                
        finally:
            conn.close()
        
        result += "\n"
        return result
        
    except Exception as e:
        return f"‚ùå L·ªói ph√¢n t√≠ch {db_file}: {str(e)}\n\n"

def clean_telemetry_entries():
    """Clean c√°c entries telemetry kh√°c (kh√¥ng ch·ªâ augment)"""
    try:
        vscode_files = get_vscode_files()
        if not vscode_files:
            return False, "Kh√¥ng t√¨m th·∫•y VSCode installations"

        results = []
        success_count = 0
        total_deleted = 0

        results.append("üîç CLEAN TELEMETRY ENTRIES - M·ªü r·ªông t·ª´ Augment VIP")
        results.append("üìã X√≥a c√°c entries: telemetry, machine, device, uuid")
        results.append("")

        # C√°c patterns ƒë·ªÉ clean
        patterns = ['%telemetry%', '%machine%', '%device%', '%uuid%']

        for vscode_path in vscode_files:
            try:
                db_files = find_database_files(vscode_path)

                for db_file in db_files:
                    try:
                        deleted_count = clean_telemetry_single_database(db_file, patterns, results)
                        if deleted_count >= 0:
                            success_count += 1
                            total_deleted += deleted_count
                    except Exception as e:
                        results.append(f"‚ùå L·ªói x·ª≠ l√Ω {db_file}: {str(e)}")

            except Exception as e:
                results.append(f"‚ùå L·ªói x·ª≠ l√Ω {vscode_path}: {str(e)}")

        results.append("")
        results.append("üìä T·ªîNG K·∫æT:")
        results.append(f"   Databases ƒë√£ x·ª≠ l√Ω: {success_count}")
        results.append(f"   Entries ƒë√£ x√≥a: {total_deleted}")

        message = "\n".join(results)
        return True, message

    except Exception as e:
        return False, f"L·ªói clean telemetry entries: {str(e)}"

def clean_telemetry_single_database(db_file, patterns, results):
    """Clean telemetry entries t·ª´ m·ªôt database"""
    try:
        if not db_file.exists():
            return -1

        results.append(f"üìÅ Database: {db_file.name}")

        conn = sqlite3.connect(str(db_file))
        cursor = conn.cursor()
        total_deleted = 0

        try:
            # Ki·ªÉm tra ItemTable
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [t[0] for t in cursor.fetchall()]

            if 'ItemTable' not in tables:
                results.append(f"   ‚ö†Ô∏è Kh√¥ng c√≥ ItemTable")
                return 0

            for pattern in patterns:
                # ƒê·∫øm entries
                count_query = f"SELECT COUNT(*) FROM ItemTable WHERE key LIKE '{pattern}';"
                cursor.execute(count_query)
                count = cursor.fetchone()[0]

                if count > 0:
                    # Hi·ªÉn th·ªã m·ªôt s·ªë keys m·∫´u
                    cursor.execute(f"SELECT key FROM ItemTable WHERE key LIKE '{pattern}' LIMIT 3;")
                    sample_keys = cursor.fetchall()

                    results.append(f"   üîç Pattern '{pattern}': {count} entries")
                    for key in sample_keys:
                        results.append(f"      - {key[0]}")

                    # X√≥a
                    delete_query = f"DELETE FROM ItemTable WHERE key LIKE '{pattern}';"
                    cursor.execute(delete_query)
                    total_deleted += count

            if total_deleted > 0:
                conn.commit()
                results.append(f"   ‚úÖ ƒê√£ x√≥a t·ªïng c·ªông {total_deleted} entries")
            else:
                results.append(f"   ‚ÑπÔ∏è Kh√¥ng c√≥ telemetry entries n√†o")

            return total_deleted

        finally:
            conn.close()

    except Exception as e:
        results.append(f"   ‚ùå L·ªói: {str(e)}")
        return -1

def backup_database(db_file):
    """T·∫°o backup c·ªßa database tr∆∞·ªõc khi clean"""
    try:
        backup_file = db_file.with_suffix(db_file.suffix + ".backup")

        # Copy file
        import shutil
        shutil.copy2(db_file, backup_file)

        return True, f"ƒê√£ t·∫°o backup: {backup_file}"
    except Exception as e:
        return False, f"L·ªói t·∫°o backup: {str(e)}"
