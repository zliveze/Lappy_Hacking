# gui/main_window.py - Giao di·ªán ch√≠nh c·ªßa Lappy Lab 4.1
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
import os
from datetime import datetime
from PIL import Image, ImageTk

# Import c√°c module t·ª´ core
from core.utils import get_system_info
from core.config_manager import ConfigManager
# S·ª≠ d·ª•ng logic m·ªõi t·ª´ features.show_config
from features.show_config import get_token, get_email, UsageManager, format_subscription_type, get_token_from_config

class LappyLabApp:
    def __init__(self):
        self.root = tk.Tk()
        self.setup_window()
        self.config_manager = ConfigManager()
        self.setup_variables()
        self.load_icons()
        self.setup_ui()
        self.load_account_info()
        self.check_ide_status()

    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root.title("Lappy Lab 4.1 - Modern IDE Management Tool")
        self.root.geometry("950x750")
        self.root.resizable(True, True)
        self.root.configure(bg='#f0f0f0')

        # Thi·∫øt l·∫≠p minimum size
        self.root.minsize(800, 600)

        # Thi·∫øt l·∫≠p icon n·∫øu c√≥
        try:
            icon_path = os.path.join(os.path.dirname(__file__), '..', '..', 'public', 'image', 'icon.ico')
            if os.path.exists(icon_path):
                self.root.iconbitmap(icon_path)
        except:
            pass

        # Thi·∫øt l·∫≠p style hi·ªán ƒë·∫°i
        style = ttk.Style()
        style.theme_use('clam')

        # Custom styles
        style.configure('Title.TLabel', font=('Segoe UI', 18, 'bold'), foreground='#2c3e50')
        style.configure('Header.TLabel', font=('Segoe UI', 12, 'bold'), foreground='#34495e')
        style.configure('Info.TLabel', font=('Segoe UI', 10), foreground='#2c3e50')
        style.configure('Modern.TButton', font=('Segoe UI', 9, 'bold'), padding=(10, 8))

        # Tab styles - g·ªçn h∆°n v√† tab selected n·ªïi b·∫≠t
        style.configure('TNotebook.Tab',
                       padding=(8, 4),  # Gi·∫£m padding ƒë·ªÉ g·ªçn h∆°n
                       font=('Segoe UI', 9),  # Font nh·ªè h∆°n
                       background='#ecf0f1',
                       foreground='#7f8c8d')

        style.map('TNotebook.Tab',
                 background=[('selected', '#ffffff'),
                           ('active', '#d5dbdb')],
                 foreground=[('selected', '#2c3e50'),
                           ('active', '#34495e')],
                 font=[('selected', ('Segoe UI', 9, 'bold')),  # Tab ƒë∆∞·ª£c ch·ªçn bold
                      ('active', ('Segoe UI', 9))],
                 padding=[('selected', (10, 6))])  # Tab ƒë∆∞·ª£c ch·ªçn to h∆°n m·ªôt ch√∫t

    def add_hover_effect(self, button, normal_color, hover_color):
        """Th√™m hi·ªáu ·ª©ng hover cho button"""
        def on_enter(e):
            button.configure(bg=hover_color)

        def on_leave(e):
            button.configure(bg=normal_color)

        button.bind("<Enter>", on_enter)
        button.bind("<Leave>", on_leave)

    def setup_variables(self):
        """Thi·∫øt l·∫≠p c√°c bi·∫øn"""
        # Cursor tab variables
        self.account_email = tk.StringVar(value="ƒêang t·∫£i...")
        self.account_type = tk.StringVar(value="ƒêang t·∫£i...")
        self.account_days = tk.StringVar(value="ƒêang t·∫£i...")
        self.usage_fast = tk.StringVar(value="ƒêang t·∫£i...")
        self.usage_slow = tk.StringVar(value="ƒêang t·∫£i...")

        # Augment tab variables
        self.jetbrains_status = tk.StringVar(value="ƒêang ki·ªÉm tra...")
        self.vscode_status = tk.StringVar(value="ƒêang ki·ªÉm tra...")
        self.augment_status = tk.StringVar(value="ƒêang ki·ªÉm tra...")
        
        # Email tab variables
        self.email_base = tk.StringVar(value="")
        self.email_max_extension = tk.StringVar(value="1000")
        self.email_result = tk.StringVar(value="")
        self.email_count = tk.IntVar(value=5)
        self.use_extension = tk.BooleanVar(value=True)
        
        # TempMail API variables
        saved_token = self.config_manager.get('tempmail_api_token', '')
        self.tempmail_api_token = tk.StringVar(value=saved_token)
        self.tempmail_username = tk.StringVar(value="")
        # Danh s√°ch t√™n mi·ªÅn m·∫∑c ƒë·ªãnh
        self.default_domains = [
            "tempmail.id.vn",
            "tempmail.ckvn.edu.vn",
            "nghienplus.io.vn",
            "1trick.net"
        ]
        self.tempmail_domain = tk.StringVar(value=self.default_domains[0])
        self.tempmail_domains = self.default_domains.copy()  # B·∫Øt ƒë·∫ßu v·ªõi danh s√°ch m·∫∑c ƒë·ªãnh
        self.tempmail_status = tk.StringVar(value="Ch∆∞a k·∫øt n·ªëi" if not saved_token else "ƒê√£ l∆∞u token")

    def load_icons(self):
        """T·∫£i c√°c icon t·ª´ th∆∞ m·ª•c public"""
        self.icons = {}
        icon_dir = os.path.join(os.path.dirname(__file__), '..', '..', 'public', 'image')

        icon_files = {
            'cursor': 'cursor.jpg',
            'augment': 'ag.jpg',
            'vscode': 'vsc.png',
            'windsurf': 'windsurf-icon.png',
            'email': 'email.png',
            'main_icon': 'icon.jpg',  # Icon ch√≠nh cho header
            'guide': 'icon.jpg'  # Icon cho tab h∆∞·ªõng d·∫´n (d√πng chung v·ªõi main_icon)
        }

        for name, filename in icon_files.items():
            try:
                icon_path = os.path.join(icon_dir, filename)
                if os.path.exists(icon_path):
                    # Load v√† resize icon
                    img = Image.open(icon_path)
                    if name == 'main_icon':
                        # Icon header l·ªõn h∆°n m·ªôt ch√∫t
                        img = img.resize((28, 28), Image.Resampling.LANCZOS)
                    else:
                        # Icon tab nh·ªè g·ªçn h∆°n
                        img = img.resize((16, 16), Image.Resampling.LANCZOS)
                    self.icons[name] = ImageTk.PhotoImage(img)
            except Exception as e:
                print(f"Kh√¥ng th·ªÉ t·∫£i icon {name}: {e}")
                self.icons[name] = None

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Header
        self.create_header()

        # T·∫°o notebook cho tabs
        self.create_tabs()

    def create_tabs(self):
        """T·∫°o tabs cho Cursor, Augment Code, Email v√† H∆∞·ªõng d·∫´n"""
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        # Tab 1: Cursor v·ªõi icon
        self.cursor_frame = ttk.Frame(self.notebook)
        if self.icons.get('cursor'):
            cursor_text = " Cursor"
            self.notebook.add(self.cursor_frame, text=cursor_text, image=self.icons.get('cursor'), compound='left')
        else:
            cursor_text = "üñ±Ô∏è Cursor"
            self.notebook.add(self.cursor_frame, text=cursor_text)
        self.setup_cursor_tab()

        # Tab 2: Augment VIP v·ªõi icon
        self.augment_frame = ttk.Frame(self.notebook)
        if self.icons.get('augment'):
            augment_text = " Augment"
            self.notebook.add(self.augment_frame, text=augment_text, image=self.icons.get('augment'), compound='left')
        else:
            augment_text = "üîß Augment"
            self.notebook.add(self.augment_frame, text=augment_text)
        self.setup_augment_tab()
        
        # Tab 3: Email v·ªõi icon
        self.email_frame = ttk.Frame(self.notebook)
        if self.icons.get('email'):
            email_text = "Email"
            self.notebook.add(self.email_frame, text=email_text, image=self.icons.get('email'), compound='left')
        else:
            email_text = "Email"
            self.notebook.add(self.email_frame, text=email_text)
        self.setup_email_tab()

        # Tab 4: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v·ªõi icon
        self.guide_frame = ttk.Frame(self.notebook)
        if self.icons.get('guide'):
            guide_text = " H∆∞·ªõng d·∫´n"
            self.notebook.add(self.guide_frame, text=guide_text, image=self.icons.get('guide'), compound='left')
        else:
            guide_text = "H∆∞·ªõng d·∫´n"
            self.notebook.add(self.guide_frame, text=guide_text)
        self.setup_guide_tab()

    def setup_cursor_tab(self):
        """Thi·∫øt l·∫≠p tab Cursor"""
        # Info panels
        self.create_cursor_info_panels()

        # Function buttons
        self.create_cursor_function_buttons()

        # Log area
        self.create_cursor_log_area()

    def setup_augment_tab(self):
        """Thi·∫øt l·∫≠p tab Augment VIP (Tool reset IDE telemetry)"""
        # Info panels
        self.create_augment_info_panels()

        # Function buttons
        self.create_augment_function_buttons()

        # Log area
        self.create_augment_log_area()

    def create_header(self):
        """T·∫°o header v·ªõi th√¥ng tin h·ªá th·ªëng"""
        # Main header frame v·ªõi background
        header_frame = tk.Frame(self.root, bg='#ffffff', relief='flat', bd=1)
        header_frame.pack(fill=tk.X, padx=15, pady=(10, 5))

        # Inner frame cho padding
        inner_frame = tk.Frame(header_frame, bg='#ffffff')
        inner_frame.pack(fill=tk.X, padx=20, pady=15)

        # Title v·ªõi icon th·∫≠t
        title_frame = tk.Frame(inner_frame, bg='#ffffff')
        title_frame.pack(side=tk.LEFT)

        # Icon v√† text
        if self.icons.get('main_icon'):
            # C√≥ icon th·∫≠t
            icon_label = tk.Label(title_frame, image=self.icons['main_icon'], bg='#ffffff')
            icon_label.pack(side=tk.LEFT, padx=(0, 10))

            title_label = tk.Label(title_frame, text="Lappy Lab",
                                  font=("Segoe UI", 20, "bold"),
                                  fg='#2c3e50', bg='#ffffff')
            title_label.pack(side=tk.LEFT)
        else:
            # Fallback v·ªÅ emoji
            title_label = tk.Label(title_frame, text="üöÄ Lappy Lab",
                                  font=("Segoe UI", 20, "bold"),
                                  fg='#2c3e50', bg='#ffffff')
            title_label.pack(side=tk.LEFT)

        # Info frame b√™n ph·∫£i
        info_frame = tk.Frame(inner_frame, bg='#ffffff')
        info_frame.pack(side=tk.RIGHT)

        # System info
        system_info = get_system_info()
        info_text = f"üíª {system_info['os']} | üñ•Ô∏è {system_info['pc_name']}"
        system_label = tk.Label(info_frame, text=info_text,
                               font=("Segoe UI", 10),
                               fg='#7f8c8d', bg='#ffffff')
        system_label.pack(anchor='e')

        # Version info v·ªõi style ƒë·∫πp h∆°n
        version_text = f"üì¶ Version 4.1 | üìÖ Released: Jun 11, 2025"
        version_label = tk.Label(info_frame, text=version_text,
                                font=("Segoe UI", 9),
                                fg='#95a5a6', bg='#ffffff')
        version_label.pack(anchor='e', pady=(2, 0))

        # Separator line
        separator = tk.Frame(self.root, height=1, bg='#ecf0f1')
        separator.pack(fill=tk.X, padx=15, pady=(5, 0))

    def create_cursor_info_panels(self):
        """T·∫°o c√°c panel th√¥ng tin cho tab Cursor"""
        info_frame = tk.Frame(self.cursor_frame, bg='#f8f9fa')
        info_frame.pack(fill=tk.X, padx=15, pady=10)

        # Account info panel
        account_frame = tk.LabelFrame(info_frame, text="üìä Th√¥ng tin t√†i kho·∫£n",
                                     font=("Segoe UI", 11, "bold"),
                                     fg='#2c3e50', bg='#ffffff',
                                     relief='solid', bd=1)
        account_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 8), pady=5)

        # Account info content
        account_inner = tk.Frame(account_frame, bg='#ffffff')
        account_inner.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        tk.Label(account_inner, text="üìß Email:", font=("Segoe UI", 10, "bold"),
                fg='#34495e', bg='#ffffff').grid(row=0, column=0, sticky=tk.W, pady=3)
        tk.Label(account_inner, textvariable=self.account_email, font=("Segoe UI", 10),
                fg='#2c3e50', bg='#ffffff').grid(row=0, column=1, sticky=tk.W, padx=(15, 0), pady=3)

        tk.Label(account_inner, text="üîë G√≥i:", font=("Segoe UI", 10, "bold"),
                fg='#34495e', bg='#ffffff').grid(row=1, column=0, sticky=tk.W, pady=3)
        tk.Label(account_inner, textvariable=self.account_type, font=("Segoe UI", 10),
                fg='#e74c3c', bg='#ffffff').grid(row=1, column=1, sticky=tk.W, padx=(15, 0), pady=3)

        tk.Label(account_inner, text="‚è∞ C√≤n l·∫°i:", font=("Segoe UI", 10, "bold"),
                fg='#34495e', bg='#ffffff').grid(row=2, column=0, sticky=tk.W, pady=3)
        tk.Label(account_inner, textvariable=self.account_days, font=("Segoe UI", 10),
                fg='#27ae60', bg='#ffffff').grid(row=2, column=1, sticky=tk.W, padx=(15, 0), pady=3)

        # Usage info panel
        usage_frame = tk.LabelFrame(info_frame, text="üìà Th√¥ng tin s·ª≠ d·ª•ng",
                                   font=("Segoe UI", 11, "bold"),
                                   fg='#2c3e50', bg='#ffffff',
                                   relief='solid', bd=1)
        usage_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(8, 0), pady=5)

        # Usage info content
        usage_inner = tk.Frame(usage_frame, bg='#ffffff')
        usage_inner.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        tk.Label(usage_inner, text="‚≠ê Fast Response:", font=("Segoe UI", 10, "bold"),
                fg='#34495e', bg='#ffffff').grid(row=0, column=0, sticky=tk.W, pady=3)
        tk.Label(usage_inner, textvariable=self.usage_fast, font=("Segoe UI", 10),
                fg='#f39c12', bg='#ffffff').grid(row=0, column=1, sticky=tk.W, padx=(15, 0), pady=3)

        tk.Label(usage_inner, text="üìù Slow Response:", font=("Segoe UI", 10, "bold"),
                fg='#34495e', bg='#ffffff').grid(row=1, column=0, sticky=tk.W, pady=3)
        tk.Label(usage_inner, textvariable=self.usage_slow, font=("Segoe UI", 10),
                fg='#3498db', bg='#ffffff').grid(row=1, column=1, sticky=tk.W, padx=(15, 0), pady=3)

    def create_augment_info_panels(self):
        """T·∫°o c√°c panel th√¥ng tin cho tab Augment VIP"""
        info_frame = tk.Frame(self.augment_frame, bg='#f8f9fa')
        info_frame.pack(fill=tk.X, padx=15, pady=10)

        # JetBrains info panel
        jetbrains_frame = tk.LabelFrame(info_frame, text="üîß JetBrains IDEs",
                                       font=("Segoe UI", 11, "bold"),
                                       fg='#2c3e50', bg='#ffffff',
                                       relief='solid', bd=1)
        jetbrains_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 8), pady=5)

        # JetBrains content
        jetbrains_inner = tk.Frame(jetbrains_frame, bg='#ffffff')
        jetbrains_inner.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        tk.Label(jetbrains_inner, text="üîß Tr·∫°ng th√°i:", font=("Segoe UI", 10, "bold"),
                fg='#34495e', bg='#ffffff').grid(row=0, column=0, sticky=tk.W, pady=3)
        tk.Label(jetbrains_inner, textvariable=self.jetbrains_status, font=("Segoe UI", 10),
                fg='#e67e22', bg='#ffffff').grid(row=0, column=1, sticky=tk.W, padx=(15, 0), pady=3)

        # VSCode info panel
        vscode_frame = tk.LabelFrame(info_frame, text="üíª VSCode-based IDEs",
                                    font=("Segoe UI", 11, "bold"),
                                    fg='#2c3e50', bg='#ffffff',
                                    relief='solid', bd=1)
        vscode_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(8, 0), pady=5)

        # VSCode content
        vscode_inner = tk.Frame(vscode_frame, bg='#ffffff')
        vscode_inner.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        tk.Label(vscode_inner, text="üíª VSCode IDEs:", font=("Segoe UI", 10, "bold"),
                fg='#34495e', bg='#ffffff').grid(row=0, column=0, sticky=tk.W, pady=3)
        tk.Label(vscode_inner, textvariable=self.vscode_status, font=("Segoe UI", 10),
                fg='#3498db', bg='#ffffff').grid(row=0, column=1, sticky=tk.W, padx=(15, 0), pady=3)

        tk.Label(vscode_inner, text="üöÄ Tool Status:", font=("Segoe UI", 10, "bold"),
                fg='#34495e', bg='#ffffff').grid(row=1, column=0, sticky=tk.W, pady=3)
        tk.Label(vscode_inner, textvariable=self.augment_status, font=("Segoe UI", 10),
                fg='#27ae60', bg='#ffffff').grid(row=1, column=1, sticky=tk.W, padx=(15, 0), pady=3)

    def create_cursor_function_buttons(self):
        """T·∫°o c√°c n√∫t ch·ª©c nƒÉng cho tab Cursor"""
        button_frame = tk.Frame(self.cursor_frame, bg='#ffffff', relief='solid', bd=1)
        button_frame.pack(fill=tk.X, padx=15, pady=10)

        # Header cho button section
        header_frame = tk.Frame(button_frame, bg='#f8f9fa', height=35)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        tk.Label(header_frame, text="‚öôÔ∏è Ch·ª©c nƒÉng Cursor",
                font=("Segoe UI", 11, "bold"),
                fg='#2c3e50', bg='#f8f9fa').pack(pady=8)

        # Content frame
        content_frame = tk.Frame(button_frame, bg='#ffffff')
        content_frame.pack(fill=tk.X, padx=20, pady=15)

        # Grid layout 2x3 g·ªçn g√†ng h∆°n
        buttons = [
            ("Reset Machine ID", self.reset_machine_id, '#3498db', '#2980b9'),
            ("T·∫Øt Auto Update", self.disable_auto_update, '#e67e22', '#d35400'),
            ("Reset Full Cursor", self.reset_full_cursor, '#e74c3c', '#c0392b'),
            ("Bypass Version Check", self.bypass_version_check, '#9b59b6', '#8e44ad'),
            ("Hi·ªÉn th·ªã Config", self.show_config, '#1abc9c', '#16a085'),
            ("Bypass Token Limit", self.bypass_token_limit, '#27ae60', '#229954')
        ]

        for i, (text, command, bg_color, hover_color) in enumerate(buttons):
            row = i // 3
            col = i % 3

            btn = tk.Button(content_frame, text=text,
                           command=command,
                           font=("Segoe UI", 9, "bold"),
                           bg=bg_color, fg='white',
                           relief='flat', bd=0,
                           width=18, height=2,
                           cursor='hand2')
            btn.grid(row=row, column=col, padx=8, pady=6, sticky='ew')
            self.add_hover_effect(btn, bg_color, hover_color)

        # Configure grid weights
        for i in range(3):
            content_frame.grid_columnconfigure(i, weight=1)

    def create_augment_function_buttons(self):
        """T·∫°o c√°c n√∫t ch·ª©c nƒÉng cho tab Augment VIP"""
        button_frame = tk.Frame(self.augment_frame, bg='#ffffff', relief='solid', bd=1)
        button_frame.pack(fill=tk.X, padx=15, pady=10)

        # Header cho button section
        header_frame = tk.Frame(button_frame, bg='#f8f9fa', height=35)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        tk.Label(header_frame, text="üîß Ch·ª©c nƒÉng Augment VIP",
                font=("Segoe UI", 11, "bold"),
                fg='#2c3e50', bg='#f8f9fa').pack(pady=8)

        # Content frame
        content_frame = tk.Frame(button_frame, bg='#ffffff')
        content_frame.pack(fill=tk.X, padx=20, pady=15)

        # IDE Selection Section
        selection_frame = tk.Frame(content_frame, bg='#f8f9fa', relief='solid', bd=1)
        selection_frame.pack(fill=tk.X, pady=(0, 15))

        selection_inner = tk.Frame(selection_frame, bg='#f8f9fa')
        selection_inner.pack(fill=tk.X, padx=15, pady=10)

        tk.Label(selection_inner, text="üéØ Ch·ªçn IDE ƒë·ªÉ reset:",
                font=("Segoe UI", 10, "bold"),
                fg='#2c3e50', bg='#f8f9fa').pack(side=tk.LEFT)

        self.selected_ide = tk.StringVar(value="cursor")
        ide_combo = ttk.Combobox(selection_inner, textvariable=self.selected_ide,
                                values=["cursor", "windsurf", "vscode", "vscodium", "all"],
                                state="readonly", width=15, font=("Segoe UI", 10))
        ide_combo.pack(side=tk.LEFT, padx=(15, 0))

        # Main buttons grid 2x3
        buttons_frame = tk.Frame(content_frame, bg='#ffffff')
        buttons_frame.pack(fill=tk.X)

        buttons = [
            ("Reset JetBrains IDs", self.reset_jetbrains_ids, '#e67e22', '#d35400'),
            ("Reset Selected IDE", self.reset_selected_ide_ids, '#3498db', '#2980b9'),
            ("Clean Augment DB", self.clean_vscode_database, '#9b59b6', '#8e44ad'),
            ("Clean Telemetry", self.clean_telemetry_entries, '#e74c3c', '#c0392b'),
            ("Reset All IDs", self.reset_all_ids_with_terminate, '#27ae60', '#229954'),
            ("Check IDE Status", self.check_ide_status, '#1abc9c', '#16a085')
        ]

        for i, (text, command, bg_color, hover_color) in enumerate(buttons):
            row = i // 3
            col = i % 3

            btn = tk.Button(buttons_frame, text=text,
                           command=command,
                           font=("Segoe UI", 9, "bold"),
                           bg=bg_color, fg='white',
                           relief='flat', bd=0,
                           width=18, height=2,
                           cursor='hand2')
            btn.grid(row=row, column=col, padx=8, pady=6, sticky='ew')
            self.add_hover_effect(btn, bg_color, hover_color)

        # Configure grid weights
        for i in range(3):
            buttons_frame.grid_columnconfigure(i, weight=1)

    def create_cursor_log_area(self):
        """T·∫°o v√πng log cho tab Cursor"""
        log_frame = tk.LabelFrame(self.cursor_frame, text="üìù Cursor Log",
                                 font=("Segoe UI", 11, "bold"),
                                 fg='#2c3e50', bg='#ffffff',
                                 relief='solid', bd=1)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(5, 15))

        # Log content frame
        log_inner = tk.Frame(log_frame, bg='#ffffff')
        log_inner.pack(fill=tk.BOTH, expand=True, padx=8, pady=8)

        self.cursor_log_text = scrolledtext.ScrolledText(log_inner, height=10,
                                                        font=("Consolas", 9),
                                                        bg="#1e1e1e", fg="#ffffff",
                                                        insertbackground="#ffffff",
                                                        selectbackground="#404040",
                                                        selectforeground="#ffffff",
                                                        relief='flat', bd=0)
        self.cursor_log_text.pack(fill=tk.BOTH, expand=True)

        # Th√™m log m·∫∑c ƒë·ªãnh v·ªõi style ƒë·∫πp h∆°n
        self.cursor_log("üöÄ Lappy Lab 4.1 - Cursor Management Tool")
        self.cursor_log("=" * 60)
        self.cursor_log("‚úÖ File storage.json h·ª£p l·ªá v√† c√≥ d·ªØ li·ªáu.")
        self.cursor_log("")
        self.cursor_log("üìÅ File SQLite:")
        self.cursor_log("   üìç ƒê∆∞·ªùng d·∫´n: C:\\Users\\letan\\AppData\\Roaming\\Cursor\\User\\globalStorage\\state.vscdb")
        self.cursor_log("   üìä K√≠ch th∆∞·ªõc: 96309248 bytes")
        self.cursor_log("   üîê Quy·ªÅn truy c·∫≠p: 0o666")
        self.cursor_log("   ‚úÖ Quy·ªÅn ƒë·ªçc/ghi: C√≥")
        self.cursor_log("‚úÖ K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu SQLite th√†nh c√¥ng.")
        self.cursor_log("üìä S·ªë b·∫£ng: 2")
        self.cursor_log("=" * 60)

    def create_augment_log_area(self):
        """T·∫°o v√πng log cho tab Augment VIP"""
        log_frame = tk.LabelFrame(self.augment_frame, text="üîß Augment VIP Log",
                                 font=("Segoe UI", 11, "bold"),
                                 fg='#2c3e50', bg='#ffffff',
                                 relief='solid', bd=1)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(5, 15))

        # Log content frame
        log_inner = tk.Frame(log_frame, bg='#ffffff')
        log_inner.pack(fill=tk.BOTH, expand=True, padx=8, pady=8)

        self.augment_log_text = scrolledtext.ScrolledText(log_inner, height=10,
                                                         font=("Consolas", 9),
                                                         bg="#1e1e1e", fg="#ffffff",
                                                         insertbackground="#ffffff",
                                                         selectbackground="#404040",
                                                         selectforeground="#ffffff",
                                                         relief='flat', bd=0)
        self.augment_log_text.pack(fill=tk.BOTH, expand=True)

        # Th√™m log m·∫∑c ƒë·ªãnh v·ªõi style ƒë·∫πp h∆°n
        self.augment_log("üîß Augment VIP - IDE Telemetry Reset Tool")
        self.augment_log("=" * 60)
        self.augment_log("üìã H·ªó tr·ª£: JetBrains IDEs + VSCode-based IDEs")
        self.augment_log("üí° Ch·ªçn IDE c·ª• th·ªÉ: Cursor, Windsurf, VSCode, VSCodium")
        self.augment_log("üöÄ T√çNH NƒÇNG M·ªöI: Reset IDs t·ª± ƒë·ªông terminate IDE tr∆∞·ªõc!")
        self.augment_log("üîç ƒêang ki·ªÉm tra IDE installations...")
        self.augment_log("=" * 60)

    def cursor_log(self, message):
        """Th√™m message v√†o cursor log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.cursor_log_text.insert(tk.END, log_entry)
        self.cursor_log_text.see(tk.END)

    def augment_log(self, message):
        """Th√™m message v√†o augment log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.augment_log_text.insert(tk.END, log_entry)
        self.augment_log_text.see(tk.END)

    def log(self, message):
        """Th√™m message v√†o cursor log (backward compatibility)"""
        self.cursor_log(message)
        
    def load_account_info(self):
        """T·∫£i th√¥ng tin t√†i kho·∫£n trong background - S·ª¨ D·ª§NG LOGIC M·ªöI"""
        def load_info():
            try:
                self.log("üîÑ ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n...")

                # Get token using new logic
                token = get_token()
                if not token:
                    self.log("‚ùå Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p Cursor.")
                    self.account_email.set("Ch∆∞a ƒëƒÉng nh·∫≠p")
                    self.account_type.set("Free")
                    self.account_days.set("0 ng√†y")
                    self.usage_fast.set("N/A")
                    self.usage_slow.set("N/A")
                    return

                self.log(f"‚úÖ ƒê√£ t√¨m th·∫•y token: {token[:20]}...")

                # Get email using new logic
                email = get_email()
                if email:
                    self.account_email.set(email)
                    self.log(f"‚úÖ Email: {email}")
                else:
                    self.account_email.set("Kh√¥ng t√¨m th·∫•y")
                    self.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y email")

                # Get subscription info using new logic
                try:
                    subscription_info = UsageManager.get_stripe_profile(token)
                    if subscription_info:
                        subscription_type = format_subscription_type(subscription_info)
                        self.account_type.set(subscription_type)

                        # Get remaining days
                        days_remaining = subscription_info.get("daysRemainingOnTrial", 0)
                        self.account_days.set(f"{days_remaining} ng√†y")

                        self.log(f"‚úÖ Subscription: {subscription_type}")
                        self.log(f"‚úÖ Days remaining: {days_remaining}")
                    else:
                        self.account_type.set("Free")
                        self.account_days.set("0 ng√†y")
                        self.log("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin subscription")
                except Exception as e:
                    self.log(f"‚ùå L·ªói l·∫•y subscription: {str(e)}")
                    self.account_type.set("Free")
                    self.account_days.set("0 ng√†y")

                # Get usage info using new logic
                try:
                    usage_info = UsageManager.get_usage(token)
                    if usage_info:
                        # Format usage display
                        premium_usage = usage_info.get('premium_usage', 0)
                        max_premium_usage = usage_info.get('max_premium_usage', "No Limit")
                        basic_usage = usage_info.get('basic_usage', 0)
                        max_basic_usage = usage_info.get('max_basic_usage', "No Limit")

                        self.usage_fast.set(f"{premium_usage}/{max_premium_usage}")
                        self.usage_slow.set(f"{basic_usage}/{max_basic_usage}")

                        self.log(f"‚úÖ Fast Response: {premium_usage}/{max_premium_usage}")
                        self.log(f"‚úÖ Slow Response: {basic_usage}/{max_basic_usage}")
                    else:
                        self.usage_fast.set("N/A")
                        self.usage_slow.set("N/A")
                        self.log("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin usage")
                except Exception as e:
                    self.log(f"‚ùå L·ªói l·∫•y usage: {str(e)}")
                    self.usage_fast.set("N/A")
                    self.usage_slow.set("N/A")

                self.log("‚úÖ Ho√†n th√†nh t·∫£i th√¥ng tin t√†i kho·∫£n")

            except Exception as e:
                self.log(f"‚ùå L·ªói t·ªïng qu√°t: {str(e)}")
                import traceback
                self.log(f"Chi ti·∫øt: {traceback.format_exc()}")

        thread = threading.Thread(target=load_info, daemon=True)
        thread.start()
        
    # C√°c ph∆∞∆°ng th·ª©c ch·ª©c nƒÉng
    def reset_machine_id(self):
        """Reset Machine ID"""
        self.log("üîÑ ƒêang reset Machine ID...")
        try:
            from features.reset_machine_id import reset_machine_id
            result, message = reset_machine_id()
            if result:
                self.log("‚úÖ Reset Machine ID th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset Machine ID th√†nh c√¥ng!")
            else:
                self.log("‚ùå Reset Machine ID th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "Reset Machine ID th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    def disable_auto_update(self):
        """T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t Cursor"""
        self.log("üîÑ ƒêang t·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t...")
        try:
            from features.disable_auto_update import disable_auto_update
            result, message = disable_auto_update()
            if result:
                self.log("‚úÖ T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t th√†nh c√¥ng!")
            else:
                self.log("‚ùå T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def reset_full_cursor(self):
        """Reset Full Cursor"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi reset
        confirm = messagebox.askyesno("X√°c nh·∫≠n", 
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu Cursor!\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.log("‚ùå ƒê√£ h·ªßy thao t√°c reset to√†n b·ªô")
            return
            
        self.log("üîÑ ƒêang reset to√†n b·ªô Cursor...")
        try:
            from features.reset_full_cursor import reset_full_cursor
            result, message = reset_full_cursor()
            if result:
                self.log("‚úÖ Reset to√†n b·ªô Cursor th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset to√†n b·ªô Cursor th√†nh c√¥ng!")
            else:
                self.log("‚ùå Reset to√†n b·ªô Cursor th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "Reset to√†n b·ªô Cursor th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    def bypass_version_check(self):
        """B·ªè qua ki·ªÉm tra phi√™n b·∫£n"""
        self.log("üîÑ ƒêang b·ªè qua ki·ªÉm tra phi√™n b·∫£n...")
        try:
            from features.bypass_version_check import bypass_version_check
            result, message = bypass_version_check()
            if result:
                self.log("‚úÖ B·ªè qua ki·ªÉm tra phi√™n b·∫£n th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "B·ªè qua ki·ªÉm tra phi√™n b·∫£n th√†nh c√¥ng!")
            else:
                self.log("‚ùå B·ªè qua ki·ªÉm tra phi√™n b·∫£n th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "B·ªè qua ki·ªÉm tra phi√™n b·∫£n th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    def show_config(self):
        """Hi·ªÉn th·ªã c·∫•u h√¨nh - S·ª¨ D·ª§NG LOGIC M·ªöI"""
        self.log("üìã ƒêang hi·ªÉn th·ªã c·∫•u h√¨nh...")
        try:
            from features.show_config import show_account_info
            result, message = show_account_info()
            if result:
                self.log("‚úÖ Hi·ªÉn th·ªã c·∫•u h√¨nh th√†nh c√¥ng!")
                # Hi·ªÉn th·ªã trong c·ª≠a s·ªï m·ªõi
                config_window = tk.Toplevel(self.root)
                config_window.title("Th√¥ng tin t√†i kho·∫£n Cursor")
                config_window.geometry("800x600")
                config_window.resizable(True, True)

                # Text widget ƒë·ªÉ hi·ªÉn th·ªã config
                config_text = scrolledtext.ScrolledText(config_window,
                                                       font=("Consolas", 10),
                                                       bg="#000080", fg="#FFFFFF")
                config_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
                config_text.insert(tk.END, message)
                config_text.config(state=tk.DISABLED)
            else:
                self.log("‚ùå Hi·ªÉn th·ªã c·∫•u h√¨nh th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", message)
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            import traceback
            self.log(f"Chi ti·∫øt: {traceback.format_exc()}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    def bypass_token_limit(self):
        """B·ªè qua gi·ªõi h·∫°n token"""
        self.log("üîÑ ƒêang b·ªè qua gi·ªõi h·∫°n token...")
        try:
            from features.bypass_token_limit import bypass_token_limit
            result, message = bypass_token_limit()
            if result:
                self.log("‚úÖ B·ªè qua gi·ªõi h·∫°n token th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "B·ªè qua gi·ªõi h·∫°n token th√†nh c√¥ng!")
            else:
                self.log("‚ùå B·ªè qua gi·ªõi h·∫°n token th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "B·ªè qua gi·ªõi h·∫°n token th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    # C√°c ph∆∞∆°ng th·ª©c cho Augment Code
    def check_ide_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i IDE installations"""
        def check_status():
            try:
                self.augment_log("üîç ƒêang ki·ªÉm tra JetBrains installations...")

                # Check JetBrains
                try:
                    from features import check_jetbrains_installation
                    jetbrains_found = check_jetbrains_installation()
                    if jetbrains_found:
                        self.jetbrains_status.set("‚úÖ ƒê√£ c√†i ƒë·∫∑t")
                        self.augment_log("‚úÖ T√¨m th·∫•y JetBrains IDEs")
                    else:
                        self.jetbrains_status.set("‚ùå Ch∆∞a c√†i ƒë·∫∑t")
                        self.augment_log("‚ùå Kh√¥ng t√¨m th·∫•y JetBrains IDEs")
                except (ImportError, AttributeError):
                    self.jetbrains_status.set("‚ùå Module l·ªói")
                    self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")

                # Check t·ª´ng IDE c·ª• th·ªÉ
                try:
                    from features.augment_utils import get_installed_ides
                    installed_ides = get_installed_ides()

                    self.augment_log("üìã Chi ti·∫øt IDE installations:")

                    ide_count = 0
                    for ide_key, ide_info in installed_ides.items():
                        if ide_key != "jetbrains":  # JetBrains ƒë√£ check ·ªü tr√™n
                            status = "‚úÖ" if ide_info["installed"] else "‚ùå"
                            self.augment_log(f"   {status} {ide_info['name']}")
                            if ide_info["installed"]:
                                ide_count += 1

                    if ide_count > 0:
                        self.vscode_status.set(f"‚úÖ {ide_count} IDE(s)")
                        self.augment_status.set("‚úÖ S·∫µn s√†ng")
                        self.augment_log(f"‚úÖ T√¨m th·∫•y {ide_count} VSCode-based IDEs")
                    else:
                        self.vscode_status.set("‚ùå Ch∆∞a c√†i ƒë·∫∑t")
                        self.augment_status.set("‚ùå Kh√¥ng kh·∫£ d·ª•ng")
                        self.augment_log("‚ùå Kh√¥ng t√¨m th·∫•y VSCode-based IDEs")

                except (ImportError, AttributeError):
                    self.vscode_status.set("‚ùå Module l·ªói")
                    self.augment_status.set("‚ùå Module l·ªói")
                    self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")

                self.augment_log("‚úÖ Ho√†n th√†nh ki·ªÉm tra IDE status")

            except Exception as e:
                self.augment_log(f"‚ùå L·ªói ki·ªÉm tra IDE status: {str(e)}")
                self.jetbrains_status.set("‚ùå L·ªói")
                self.vscode_status.set("‚ùå L·ªói")
                self.augment_status.set("‚ùå L·ªói")

        thread = threading.Thread(target=check_status, daemon=True)
        thread.start()

    def reset_jetbrains_ids(self):
        """Reset JetBrains IDs"""
        self.augment_log("üîÑ ƒêang reset JetBrains IDs...")
        try:
            from features import reset_jetbrains_ids
            result, message = reset_jetbrains_ids()
            if result:
                self.augment_log("‚úÖ Reset JetBrains IDs th√†nh c√¥ng!")
                self.augment_log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset JetBrains IDs th√†nh c√¥ng!")
            else:
                self.augment_log("‚ùå Reset JetBrains IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Reset JetBrains IDs th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def reset_selected_ide_ids(self):
        """Reset IDs c·ªßa IDE ƒë∆∞·ª£c ch·ªçn (t√≠ch h·ª£p terminate)"""
        selected = self.selected_ide.get()

        if selected == "all":
            self.reset_all_ids_with_terminate()
            return

        ide_names = {
            "cursor": "Cursor",
            "windsurf": "Windsurf",
            "vscode": "Visual Studio Code",
            "vscodium": "VSCodium"
        }

        ide_name = ide_names.get(selected, selected.upper())

        # X√°c nh·∫≠n tr∆∞·ªõc khi th·ª±c hi·ªán
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     f"üîÑ RESET {ide_name.upper()} IDs\n\n"
                                     f"Qu√° tr√¨nh s·∫Ω:\n"
                                     f"1. üõë Terminate {ide_name} processes\n"
                                     f"2. üîÑ Reset {ide_name} telemetry IDs\n"
                                     f"3. üîí Lock files\n\n"
                                     f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log(f"‚ùå ƒê√£ h·ªßy reset {ide_name} IDs")
            return

        self.augment_log(f"üöÄ B·∫Øt ƒë·∫ßu reset {ide_name} IDs (c√≥ terminate)...")

        try:
            # B∆∞·ªõc 1: Terminate IDE tr∆∞·ªõc
            self.augment_log(f"üõë B∆∞·ªõc 1: Terminate {ide_name} processes...")
            terminate_success = self.terminate_specific_ide(selected)

            if terminate_success:
                self.augment_log(f"‚úÖ Terminate {ide_name} th√†nh c√¥ng!")
            else:
                self.augment_log(f"‚ö†Ô∏è Terminate {ide_name} c√≥ v·∫•n ƒë·ªÅ, nh∆∞ng ti·∫øp t·ª•c reset...")

            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o processes ƒë√£ ƒë√≥ng
            self.augment_log("‚è≥ ƒê·ª£i 2 gi√¢y ƒë·ªÉ processes ƒë√≥ng ho√†n to√†n...")
            import time
            time.sleep(2)

            # B∆∞·ªõc 2: Reset IDs
            self.augment_log(f"üîÑ B∆∞·ªõc 2: Reset {ide_name} IDs...")
            from features.augment_reset_ids import reset_vscode_ids
            result, message = reset_vscode_ids(specific_ide=selected)

            if result:
                self.augment_log(f"‚úÖ Reset {ide_name} IDs th√†nh c√¥ng!")
                self.augment_log(message)
                self.augment_log(f"üéâ Ho√†n th√†nh reset {ide_name}! B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i {ide_name}.")
                messagebox.showinfo("Th√†nh c√¥ng",
                                   f"‚úÖ Reset {ide_name} ho√†n th√†nh!\n\n"
                                   f"‚úì ƒê√£ terminate processes\n"
                                   f"‚úì ƒê√£ reset telemetry IDs\n"
                                   f"‚úì ƒê√£ lock files\n\n"
                                   f"B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i {ide_name}.")
            else:
                self.augment_log(f"‚ùå Reset {ide_name} IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", f"Reset {ide_name} IDs th·∫•t b·∫°i!")

        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def terminate_specific_ide(self, ide_type):
        """Terminate IDE c·ª• th·ªÉ"""
        try:
            import psutil

            # Mapping IDE types to process patterns
            ide_patterns = {
                "cursor": ["cursor"],
                "windsurf": ["windsurf"],
                "vscode": ["code", "vscode"],
                "vscodium": ["vscodium"]
            }

            patterns = ide_patterns.get(ide_type, [ide_type])
            terminated_count = 0

            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    proc_name = proc.info['name'].lower()
                    cmdline = ' '.join(proc.info['cmdline']).lower() if proc.info['cmdline'] else ""

                    # Ki·ªÉm tra xem c√≥ ph·∫£i IDE c·∫ßn terminate kh√¥ng
                    should_terminate = False
                    for pattern in patterns:
                        if pattern in proc_name or pattern in cmdline:
                            should_terminate = True
                            break

                    if should_terminate:
                        try:
                            proc.terminate()
                            proc.wait(timeout=3)
                            self.augment_log(f"   ‚úÖ Terminated: {proc.info['name']} (PID: {proc.info['pid']})")
                            terminated_count += 1
                        except psutil.TimeoutExpired:
                            proc.kill()
                            self.augment_log(f"   üî• Force killed: {proc.info['name']} (PID: {proc.info['pid']})")
                            terminated_count += 1
                        except psutil.NoSuchProcess:
                            pass
                        except Exception as e:
                            self.augment_log(f"   ‚ùå Error terminating {proc.info['name']}: {str(e)}")

                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
                except Exception:
                    continue

            if terminated_count > 0:
                self.augment_log(f"   üìä ƒê√£ terminate {terminated_count} processes")
                return True
            else:
                self.augment_log(f"   ‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y processes n√†o ƒëang ch·∫°y")
                return True  # Kh√¥ng c√≥ process n√†o c≈©ng l√† th√†nh c√¥ng

        except Exception as e:
            self.augment_log(f"   ‚ùå L·ªói terminate: {str(e)}")
            return False

    def reset_all_ids_with_terminate(self):
        """Reset t·∫•t c·∫£ IDs v·ªõi terminate t√≠ch h·ª£p"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi reset all
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     "üîÑ RESET T·∫§T C·∫¢ IDs\n\n"
                                     "Qu√° tr√¨nh s·∫Ω:\n"
                                     "1. üõë Terminate T·∫§T C·∫¢ VSCode-based IDEs\n"
                                     "2. üîß Reset JetBrains IDs\n"
                                     "3. üíª Reset t·∫•t c·∫£ VSCode variant IDs\n"
                                     "4. üîí Lock t·∫•t c·∫£ files\n\n"
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: T·∫•t c·∫£ IDEs s·∫Ω b·ªã ƒë√≥ng!\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log("‚ùå ƒê√£ h·ªßy thao t√°c reset t·∫•t c·∫£ IDs")
            return

        self.augment_log("üöÄ B·∫Øt ƒë·∫ßu reset T·∫§T C·∫¢ IDs (c√≥ terminate)...")

        try:
            # B∆∞·ªõc 1: Terminate t·∫•t c·∫£ IDEs
            self.augment_log("üõë B∆∞·ªõc 1: Terminate t·∫•t c·∫£ VSCode-based IDEs...")
            from features import terminate_ides
            _, terminate_message = terminate_ides()
            self.augment_log(terminate_message)

            # ƒê·ª£i processes ƒë√≥ng
            self.augment_log("‚è≥ ƒê·ª£i 3 gi√¢y ƒë·ªÉ t·∫•t c·∫£ processes ƒë√≥ng...")
            import time
            time.sleep(3)

            # B∆∞·ªõc 2: Reset t·∫•t c·∫£ IDs
            self.augment_log("üîÑ B∆∞·ªõc 2: Reset t·∫•t c·∫£ IDs...")
            from features import reset_all_ids
            result, message = reset_all_ids()

            if result:
                self.augment_log("‚úÖ Reset t·∫•t c·∫£ IDs th√†nh c√¥ng!")
                self.augment_log(message)
                self.augment_log("üéâ Ho√†n th√†nh reset t·∫•t c·∫£! B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i c√°c IDEs.")
                messagebox.showinfo("Th√†nh c√¥ng",
                                   "‚úÖ Reset t·∫•t c·∫£ IDs ho√†n th√†nh!\n\n"
                                   "‚úì ƒê√£ terminate t·∫•t c·∫£ IDEs\n"
                                   "‚úì ƒê√£ reset JetBrains IDs\n"
                                   "‚úì ƒê√£ reset VSCode variant IDs\n"
                                   "‚úì ƒê√£ lock t·∫•t c·∫£ files\n\n"
                                   "B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i c√°c IDEs.")
            else:
                self.augment_log("‚ùå Reset t·∫•t c·∫£ IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Reset t·∫•t c·∫£ IDs th·∫•t b·∫°i!")

        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def reset_vscode_ids(self):
        """Reset t·∫•t c·∫£ VSCode IDs (backward compatibility)"""
        self.augment_log("üîÑ ƒêang reset t·∫•t c·∫£ VSCode IDs...")
        try:
            from features.augment_reset_ids import reset_vscode_ids
            result, message = reset_vscode_ids()
            if result:
                self.augment_log("‚úÖ Reset VSCode IDs th√†nh c√¥ng!")
                self.augment_log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset VSCode IDs th√†nh c√¥ng!")
            else:
                self.augment_log("‚ùå Reset VSCode IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Reset VSCode IDs th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def clean_vscode_database(self):
        """Clean VSCode Database (ch·ªâ entries ch·ª©a 'augment')"""
        self.augment_log("üîÑ ƒêang clean VSCode database (Augment entries)...")
        try:
            from features.augment_clean_database import clean_vscode_database
            result, message = clean_vscode_database()
            self.augment_log("üìã Clean Augment Database ho√†n th√†nh!")
            self.augment_log(message)
            if result:
                messagebox.showinfo("Ho√†n th√†nh", "Clean Augment Database ho√†n th√†nh!\n\nXem chi ti·∫øt trong log.")
            else:
                messagebox.showerror("L·ªói", "Clean Augment Database th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def clean_telemetry_entries(self):
        """Clean t·∫•t c·∫£ telemetry entries"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi clean
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a T·∫§T C·∫¢ entries telemetry!\n"
                                     "Bao g·ªìm: telemetry, machine, device, uuid\n\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log("‚ùå ƒê√£ h·ªßy thao t√°c clean telemetry")
            return

        self.augment_log("üîÑ ƒêang clean t·∫•t c·∫£ telemetry entries...")
        try:
            from features.augment_clean_database import clean_telemetry_entries
            result, message = clean_telemetry_entries()
            self.augment_log("üìã Clean Telemetry ho√†n th√†nh!")
            self.augment_log(message)
            if result:
                messagebox.showinfo("Ho√†n th√†nh", "Clean Telemetry ho√†n th√†nh!\n\nXem chi ti·∫øt trong log.")
            else:
                messagebox.showerror("L·ªói", "Clean Telemetry th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def terminate_ides(self):
        """Terminate IDEs"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi terminate
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω ƒë√≥ng t·∫•t c·∫£ IDE ƒëang ch·∫°y!\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log("‚ùå ƒê√£ h·ªßy thao t√°c terminate IDEs")
            return

        self.augment_log("üîÑ ƒêang terminate IDEs...")
        try:
            from features import terminate_ides
            result, message = terminate_ides()
            if result:
                self.augment_log("‚úÖ Terminate IDEs th√†nh c√¥ng!")
                self.augment_log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Terminate IDEs th√†nh c√¥ng!")
            else:
                self.augment_log("‚ùå Terminate IDEs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Terminate IDEs th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def reset_all_ids(self):
        """Reset t·∫•t c·∫£ IDs"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi reset all
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω reset t·∫•t c·∫£ IDs c·ªßa JetBrains v√† VSCode!\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log("‚ùå ƒê√£ h·ªßy thao t√°c reset t·∫•t c·∫£ IDs")
            return

        self.augment_log("üîÑ ƒêang reset t·∫•t c·∫£ IDs...")
        try:
            from features import reset_all_ids
            result, message = reset_all_ids()
            if result:
                self.augment_log("‚úÖ Reset t·∫•t c·∫£ IDs th√†nh c√¥ng!")
                self.augment_log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset t·∫•t c·∫£ IDs th√†nh c√¥ng!")
            else:
                self.augment_log("‚ùå Reset t·∫•t c·∫£ IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Reset t·∫•t c·∫£ IDs th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def setup_guide_tab(self):
        """Thi·∫øt l·∫≠p tab H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
        # Main container v·ªõi padding
        main_container = tk.Frame(self.guide_frame, bg='#f8f9fa')
        main_container.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        # Header section
        header_frame = tk.Frame(main_container, bg='#ffffff', relief='solid', bd=1)
        header_frame.pack(fill=tk.X, pady=(0, 10))

        header_inner = tk.Frame(header_frame, bg='#f8f9fa', height=40)
        header_inner.pack(fill=tk.X)
        header_inner.pack_propagate(False)

        tk.Label(header_inner, text="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Lappy Lab 4.1",
                font=("Segoe UI", 11, "bold"),
                fg='#2c3e50', bg='#f8f9fa').pack(pady=12)

        # Content frame v·ªõi scrollable text
        content_frame = tk.LabelFrame(main_container, text="üìã Chi ti·∫øt h∆∞·ªõng d·∫´n",
                                     font=("Segoe UI", 11, "bold"),
                                     fg='#2c3e50', bg='#ffffff',
                                     relief='solid', bd=1)
        content_frame.pack(fill=tk.BOTH, expand=True)

        # Scrollable text area
        content_inner = tk.Frame(content_frame, bg='#ffffff')
        content_inner.pack(fill=tk.BOTH, expand=True, padx=8, pady=8)

        self.guide_text = scrolledtext.ScrolledText(content_inner, height=25,
                                                   font=("Segoe UI", 10),
                                                   bg="#ffffff", fg="#2c3e50",
                                                   insertbackground="#2c3e50",
                                                   selectbackground="#3498db",
                                                   selectforeground="#ffffff",
                                                   relief='flat', bd=0,
                                                   wrap=tk.WORD)
        self.guide_text.pack(fill=tk.BOTH, expand=True)

        # Load guide content
        self.load_guide_content()

    def load_guide_content(self):
        """T·∫£i n·ªôi dung h∆∞·ªõng d·∫´n ng·∫Øn g·ªçn x√∫c t√≠ch"""
        guide_content = """üöÄ LAPPY LAB 4.1 - H∆Ø·ªöNG D·∫™N NHANH
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîß ƒêƒÉng xu·∫•t t√†i kho·∫£n Cursor ho·∫∑c Augment Code tr∆∞·ªõc khi reset
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìã TAB CURSOR
ƒê·ªÉ Reset l·ªói Too many trial account, b·∫°n c·∫ßn:
Reset Machine ID l√† ƒë·ªß n·∫øu tr∆∞·ªùng h·ª£p v·∫´n b·ªã qu√©t th√¨ h√£y Reset Full Cursor, sau ƒë√≥ d√πng 1 email m·ªõi ƒë·ªÉ ƒëƒÉng k√Ω cursor 
C√≥ th·ªÉ d√πng Tab Email ƒë·ªÉ t·∫°o Extend Mail ho·∫∑c temp mail ƒë·ªÉ ƒëƒÉng k√Ω cursor

üìã TAB AUGMENT
ƒê·ªÉ Reset l·ªói Too many trial account, b·∫°n c·∫ßn:
‚Ä¢ Ch·ªçn IDE c·∫ßn reset
‚Ä¢ Ch·ªçn Reset Selected IDE: Reset IDE ƒë√£ ch·ªçn (t·ª± ƒë·ªông ƒë√≥ng IDE)
‚Ä¢ Ch·ªçn Clean Augment DB: X√≥a d·∫•u v·∫øt Augment

üìã TAB EMAIL
Tab Email c√≥ 2 ch·ª©c nƒÉng ch√≠nh:

1Ô∏è‚É£ Email m·ªü r·ªông:
‚Ä¢ Nh·∫≠p ph·∫ßn ƒë·∫ßu email (kh√¥ng c·∫ßn @gmail.com)
‚Ä¢ T√πy ch·ªçn s·ª≠ d·ª•ng s·ªë m·ªü r·ªông (c√≥ th·ªÉ b·∫≠t/t·∫Øt)
‚Ä¢ Ch·ªçn s·ªë m·ªü r·ªông t·ªëi ƒëa (random t·ª´ 1 ƒë·∫øn gi√° tr·ªã n√†y)
‚Ä¢ T·∫°o email ng·∫´u nhi√™n v·ªõi ƒë·ªãnh d·∫°ng t√πy bi·∫øn (ch·ªØ hoa/th∆∞·ªùng, d·∫•u ch·∫•m)
‚Ä¢ C√≥ th·ªÉ t·∫°o nhi·ªÅu email c√πng l√∫c

2Ô∏è‚É£ TempMail API:
‚Ä¢ Nh·∫≠p API Token t·ª´ tempmail.id.vn
‚Ä¢ T·∫°o email t·∫°m th·ªùi m·ªõi
‚Ä¢ Xem danh s√°ch email ƒë√£ t·∫°o
‚Ä¢ Qu·∫£n l√Ω email t·∫°m th·ªùi d·ªÖ d√†ng

‚ö†Ô∏è L∆ØU √ù:
‚Ä¢ Lu√¥n ch·∫°y v·ªõi quy·ªÅn Administrator
‚Ä¢ Backup d·ªØ li·ªáu tr∆∞·ªõc khi reset
‚Ä¢ ƒê·ªçc k·ªπ c·∫£nh b√°o tr∆∞·ªõc khi x√°c nh·∫≠n

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üë®‚Äçüíª TH√îNG TIN L·∫¨P TR√åNH VI√äN
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîß L·∫≠p tr√¨nh vi√™n: Nguy√™n K·ª∑
üìß GitHub: github.com/zlive
üí¨ Discord: .nguyenky

üì¶ Version: Lappy Lab 4.1
üìÖ Release: Jun 11, 2025"""

        # Insert content v√† disable editing
        self.guide_text.insert(tk.END, guide_content)
        self.guide_text.config(state=tk.DISABLED)

    def setup_email_tab(self):
        """Thi·∫øt l·∫≠p tab Email"""
        # Main container v·ªõi padding
        main_container = tk.Frame(self.email_frame, bg='#f8f9fa')
        main_container.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        # T·∫°o notebook cho c√°c subtab
        email_notebook = ttk.Notebook(main_container)
        email_notebook.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)
        
        # Tab 1: T·∫°o Email m·ªü r·ªông
        self.extend_email_frame = ttk.Frame(email_notebook)
        email_notebook.add(self.extend_email_frame, text="Email m·ªü r·ªông")
        self.setup_extend_email_tab()
        
        # Tab 2: TempMail API
        self.tempmail_frame = ttk.Frame(email_notebook)
        email_notebook.add(self.tempmail_frame, text="TempMail API")
        self.setup_tempmail_tab()

    def setup_extend_email_tab(self):
        """Thi·∫øt l·∫≠p tab Email m·ªü r·ªông"""
        # Main container v·ªõi padding
        main_container = tk.Frame(self.extend_email_frame, bg='#f8f9fa')
        main_container.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        # Header section
        header_frame = tk.Frame(main_container, bg='#ffffff', relief='solid', bd=1)
        header_frame.pack(fill=tk.X, pady=(0, 10))

        header_inner = tk.Frame(header_frame, bg='#f8f9fa', height=40)
        header_inner.pack(fill=tk.X)
        header_inner.pack_propagate(False)

        tk.Label(header_inner, text="C√¥ng c·ª• t·∫°o Email m·ªü r·ªông",
                font=("Segoe UI", 11, "bold"),
                fg='#2c3e50', bg='#f8f9fa').pack(pady=12)

        # Content frame
        content_frame = tk.LabelFrame(main_container, text="‚úâÔ∏è T·∫°o Email m·ªü r·ªông",
                                     font=("Segoe UI", 11, "bold"),
                                     fg='#2c3e50', bg='#ffffff',
                                     relief='solid', bd=1)
        content_frame.pack(fill=tk.BOTH, expand=True)

        # Input section
        input_frame = tk.Frame(content_frame, bg='#ffffff')
        input_frame.pack(fill=tk.X, padx=15, pady=15)

        # Email base input
        base_label = tk.Label(input_frame, text="Nh·∫≠p ph·∫ßn ƒë·∫ßu email:", 
                             font=("Segoe UI", 10), 
                             fg='#2c3e50', bg='#ffffff')
        base_label.grid(row=0, column=0, sticky='w', padx=5, pady=5)
        
        base_entry = tk.Entry(input_frame, textvariable=self.email_base, 
                             font=("Segoe UI", 10), width=25)
        base_entry.grid(row=0, column=1, sticky='w', padx=5, pady=5)
        
        example_label = tk.Label(input_frame, text="(Kh√¥ng bao g·ªìm @gmail.com)", 
                                font=("Segoe UI", 9, "italic"), 
                                fg='#7f8c8d', bg='#ffffff')
        example_label.grid(row=0, column=2, sticky='w', padx=5, pady=5)

        # Checkbox ƒë·ªÉ s·ª≠ d·ª•ng s·ªë m·ªü r·ªông
        use_extension_check = tk.Checkbutton(input_frame, text="S·ª≠ d·ª•ng s·ªë m·ªü r·ªông",
                                           variable=self.use_extension,
                                           font=("Segoe UI", 10),
                                           fg='#2c3e50', bg='#ffffff',
                                           command=self.toggle_extension_input)
        use_extension_check.grid(row=1, column=0, sticky='w', padx=5, pady=5)

        # Max extension input
        self.extension_frame = tk.Frame(input_frame, bg='#ffffff')
        self.extension_frame.grid(row=1, column=1, columnspan=2, sticky='w')
        
        extension_label = tk.Label(self.extension_frame, text="S·ªë m·ªü r·ªông t·ªëi ƒëa:", 
                                  font=("Segoe UI", 10), 
                                  fg='#2c3e50', bg='#ffffff')
        extension_label.pack(side=tk.LEFT, padx=0, pady=5)
        
        extension_entry = tk.Entry(self.extension_frame, textvariable=self.email_max_extension, 
                                  font=("Segoe UI", 10), width=10)
        extension_entry.pack(side=tk.LEFT, padx=5, pady=5)
        
        extension_note = tk.Label(self.extension_frame, text="(S·ªë ng·∫´u nhi√™n t·ª´ 1 ƒë·∫øn gi√° tr·ªã n√†y)", 
                                 font=("Segoe UI", 9, "italic"), 
                                 fg='#7f8c8d', bg='#ffffff')
        extension_note.pack(side=tk.LEFT, padx=5, pady=5)

        # Email count input (for multiple emails)
        count_label = tk.Label(input_frame, text="S·ªë l∆∞·ª£ng email:", 
                              font=("Segoe UI", 10), 
                              fg='#2c3e50', bg='#ffffff')
        count_label.grid(row=2, column=0, sticky='w', padx=5, pady=5)
        
        count_spinbox = tk.Spinbox(input_frame, from_=1, to=20, textvariable=self.email_count,
                                  font=("Segoe UI", 10), width=5)
        count_spinbox.grid(row=2, column=1, sticky='w', padx=5, pady=5)

        # Buttons section
        button_frame = tk.Frame(content_frame, bg='#ffffff')
        button_frame.pack(fill=tk.X, padx=15, pady=(0, 15))
        
        # Generate single email button
        generate_btn = tk.Button(button_frame, text="T·∫°o Email ng·∫´u nhi√™n", 
                                font=("Segoe UI", 9, "bold"),
                                bg='#3498db', fg='white',
                                relief='flat', borderwidth=0,
                                padx=15, pady=8,
                                command=self.generate_single_email)
        generate_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(generate_btn, '#3498db', '#2980b9')
        
        # Generate multiple emails button
        generate_multiple_btn = tk.Button(button_frame, text="T·∫°o nhi·ªÅu Email", 
                                        font=("Segoe UI", 9, "bold"),
                                        bg='#2ecc71', fg='white',
                                        relief='flat', borderwidth=0,
                                        padx=15, pady=8,
                                        command=self.generate_multiple_emails)
        generate_multiple_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(generate_multiple_btn, '#2ecc71', '#27ae60')
        
        # Copy button
        copy_btn = tk.Button(button_frame, text="Sao ch√©p k·∫øt qu·∫£", 
                            font=("Segoe UI", 9, "bold"),
                            bg='#9b59b6', fg='white',
                            relief='flat', borderwidth=0,
                            padx=15, pady=8,
                            command=self.copy_email_result)
        copy_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(copy_btn, '#9b59b6', '#8e44ad')

        # Results section
        result_frame = tk.LabelFrame(content_frame, text="üìã K·∫øt qu·∫£",
                                    font=("Segoe UI", 10, "bold"),
                                    fg='#2c3e50', bg='#ffffff',
                                    relief='solid', bd=1)
        result_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=(0, 15))
        
        # Scrollable text area for results
        self.email_result_text = scrolledtext.ScrolledText(result_frame, height=10,
                                                         font=("Consolas", 10),
                                                         bg="#f8f9fa", fg="#2c3e50",
                                                         wrap=tk.WORD)
        self.email_result_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

    def setup_tempmail_tab(self):
        """Thi·∫øt l·∫≠p tab TempMail API"""
        # Main container v·ªõi padding
        main_container = tk.Frame(self.tempmail_frame, bg='#f8f9fa')
        main_container.pack(fill=tk.BOTH, expand=True, padx=15, pady=10)

        # Ph·∫ßn tr√™n: API Token v√† H∆∞·ªõng d·∫´n (2 c·ªôt)
        top_frame = tk.Frame(main_container, bg='#f8f9fa')
        top_frame.pack(fill=tk.X, pady=(0, 10))
        
        # C·ªôt 1: API Token
        token_frame = tk.LabelFrame(top_frame, text="üîë API Token",
                                   font=("Segoe UI", 11, "bold"),
                                   fg='#2c3e50', bg='#ffffff',
                                   relief='solid', bd=1)
        token_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        token_inner = tk.Frame(token_frame, bg='#ffffff')
        token_inner.pack(fill=tk.X, padx=10, pady=10)
        
        # API Token input
        token_label = tk.Label(token_inner, text="API Token:", 
                              font=("Segoe UI", 10), 
                              fg='#2c3e50', bg='#ffffff')
        token_label.grid(row=0, column=0, sticky='w', padx=5, pady=5)
        
        token_entry = tk.Entry(token_inner, textvariable=self.tempmail_api_token, 
                              font=("Segoe UI", 10), width=25, show="‚Ä¢")
        token_entry.grid(row=0, column=1, sticky='w', padx=5, pady=5)
        
        # Connect button
        connect_btn = tk.Button(token_inner, text="K·∫øt n·ªëi", 
                               font=("Segoe UI", 9, "bold"),
                               bg='#3498db', fg='white',
                               relief='flat', borderwidth=0,
                               padx=15, pady=5,
                               command=self.connect_tempmail_api)
        connect_btn.grid(row=0, column=2, sticky='w', padx=5, pady=5)
        self.add_hover_effect(connect_btn, '#3498db', '#2980b9')
        
        # Status display
        status_label = tk.Label(token_inner, text="Tr·∫°ng th√°i:", 
                               font=("Segoe UI", 10), 
                               fg='#2c3e50', bg='#ffffff')
        status_label.grid(row=1, column=0, sticky='w', padx=5, pady=5)
        
        self.tempmail_status_label = tk.Label(token_inner, textvariable=self.tempmail_status, 
                                            font=("Segoe UI", 10, "bold"), 
                                            fg='#e74c3c', bg='#ffffff')
        self.tempmail_status_label.grid(row=1, column=1, columnspan=2, sticky='w', padx=5, pady=5)
        
        # C·ªôt 2: H∆∞·ªõng d·∫´n
        guide_frame = tk.LabelFrame(top_frame, text="üìù H∆∞·ªõng d·∫´n",
                                   font=("Segoe UI", 11, "bold"),
                                   fg='#2c3e50', bg='#ffffff',
                                   relief='solid', bd=1)
        guide_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        guide_text = scrolledtext.ScrolledText(guide_frame, height=4,
                                             font=("Segoe UI", 9),
                                             bg="#f8f9fa", fg="#2c3e50",
                                             wrap=tk.WORD)
        guide_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        guide_content = """1. T·∫°o t√†i kho·∫£n t·∫°i tempmail.id.vn
2. Truy c·∫≠p trang c√° nh√¢n t·∫°i avatar
3. T·∫°o API token t·∫°i m·ª•c API ƒë·ªÉ s·ª≠ d·ª•ng.
L∆∞u √Ω: API ch·ªâ hi·ªÉn th·ªã 1 l·∫ßn duy nh·∫•t l√∫c t·∫°o."""
        
        guide_text.insert(tk.END, guide_content)
        guide_text.config(state=tk.DISABLED)
        
        # Ph·∫ßn gi·ªØa: T·∫°o Email m·ªõi
        create_frame = tk.LabelFrame(main_container, text="üìß T·∫°o Email m·ªõi",
                                    font=("Segoe UI", 11, "bold"),
                                    fg='#2c3e50', bg='#ffffff',
                                    relief='solid', bd=1)
        create_frame.pack(fill=tk.X, padx=0, pady=(0, 10))
        
        create_inner = tk.Frame(create_frame, bg='#ffffff')
        create_inner.pack(fill=tk.X, padx=10, pady=10)
        
        # T·∫•t c·∫£ trong 1 h√†ng: Username v√† Domain
        input_frame = tk.Frame(create_inner, bg='#ffffff')
        input_frame.pack(fill=tk.X, pady=5)
        
        # Username input
        username_label = tk.Label(input_frame, text="Ng∆∞·ªùi d√πng:", 
                                 font=("Segoe UI", 10), 
                                 fg='#2c3e50', bg='#ffffff')
        username_label.pack(side=tk.LEFT, padx=5)
        
        username_entry = tk.Entry(input_frame, textvariable=self.tempmail_username, 
                                 font=("Segoe UI", 10), width=15)
        username_entry.pack(side=tk.LEFT, padx=5)
        
        # Domain input
        domain_label = tk.Label(input_frame, text="T√™n mi·ªÅn:", 
                               font=("Segoe UI", 10), 
                               fg='#2c3e50', bg='#ffffff')
        domain_label.pack(side=tk.LEFT, padx=5)
        
        # Domain combobox
        self.domain_combobox = ttk.Combobox(input_frame, textvariable=self.tempmail_domain, 
                                           font=("Segoe UI", 10), width=15,
                                           values=self.tempmail_domains)
        self.domain_combobox.pack(side=tk.LEFT, padx=5)
        
        # C√°c n√∫t ch·ª©c nƒÉng
        create_btn = tk.Button(input_frame, text="T·∫°o m·ªõi", 
                              font=("Segoe UI", 9, "bold"),
                              bg='#2ecc71', fg='white',
                              relief='flat', borderwidth=0,
                              padx=10, pady=3,
                              command=self.create_tempmail)
        create_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(create_btn, '#2ecc71', '#27ae60')
        
        refresh_btn = tk.Button(input_frame, text="L√†m m·ªõi", 
                              font=("Segoe UI", 9),
                              bg='#95a5a6', fg='white',
                              relief='flat', borderwidth=0,
                              padx=10, pady=3,
                              command=self.refresh_domains)
        refresh_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(refresh_btn, '#95a5a6', '#7f8c8d')
        
        list_btn = tk.Button(input_frame, text="Danh s√°ch", 
                            font=("Segoe UI", 9, "bold"),
                            bg='#9b59b6', fg='white',
                            relief='flat', borderwidth=0,
                            padx=10, pady=3,
                            command=self.list_tempmail)
        list_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(list_btn, '#9b59b6', '#8e44ad')
        
        # Ph·∫ßn d∆∞·ªõi: Hi·ªÉn th·ªã email v√† k·∫øt qu·∫£
        bottom_frame = tk.Frame(main_container, bg='#f8f9fa')
        bottom_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 0))
        
        # C·ªôt 1: Danh s√°ch email
        email_list_frame = tk.LabelFrame(bottom_frame, text="üìã Danh s√°ch Email",
                                        font=("Segoe UI", 10, "bold"),
                                        fg='#2c3e50', bg='#ffffff',
                                        relief='solid', bd=1)
        email_list_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        # T·∫°o Listbox v·ªõi scrollbar
        list_container = tk.Frame(email_list_frame, bg='#ffffff')
        list_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        scrollbar = tk.Scrollbar(list_container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.email_listbox = tk.Listbox(list_container, 
                                      font=("Segoe UI", 10),
                                      bg="#f8f9fa", fg="#2c3e50",
                                      selectbackground="#3498db",
                                      selectforeground="#ffffff",
                                      activestyle="none",
                                      height=10)
        self.email_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Li√™n k·∫øt scrollbar v·ªõi listbox
        self.email_listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.email_listbox.yview)
        
        # Th√™m binding cho listbox
        self.email_listbox.bind('<<ListboxSelect>>', self.on_email_selected)
        
        # N√∫t ch·ª©c nƒÉng cho listbox
        listbox_buttons = tk.Frame(email_list_frame, bg='#ffffff')
        listbox_buttons.pack(fill=tk.X, padx=5, pady=5)
        
        read_btn = tk.Button(listbox_buttons, text="ƒê·ªçc th∆∞", 
                           font=("Segoe UI", 9, "bold"),
                           bg='#3498db', fg='white',
                           relief='flat', borderwidth=0,
                           padx=10, pady=3,
                           command=self.read_selected_email)
        read_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(read_btn, '#3498db', '#2980b9')
        
        delete_btn = tk.Button(listbox_buttons, text="X√≥a email",
                             font=("Segoe UI", 9, "bold"),
                             bg='#e74c3c', fg='white',
                             relief='flat', borderwidth=0,
                             padx=10, pady=3,
                             command=self.delete_selected_email)
        delete_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(delete_btn, '#e74c3c', '#c0392b')

        # N√∫t ki·ªÉm tra h·ªó tr·ª£ x√≥a
        check_delete_btn = tk.Button(listbox_buttons, text="Ki·ªÉm tra API",
                                   font=("Segoe UI", 9, "bold"),
                                   bg='#f39c12', fg='white',
                                   relief='flat', borderwidth=0,
                                   padx=10, pady=3,
                                   command=self.check_delete_support)
        check_delete_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(check_delete_btn, '#f39c12', '#e67e22')
        
        # C·ªôt 2: K·∫øt qu·∫£
        result_frame = tk.LabelFrame(bottom_frame, text="üìã K·∫øt qu·∫£",
                                    font=("Segoe UI", 10, "bold"),
                                    fg='#2c3e50', bg='#ffffff',
                                    relief='solid', bd=1)
        result_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # Scrollable text area for results
        self.tempmail_result_text = scrolledtext.ScrolledText(result_frame, height=10,
                                                            font=("Consolas", 10),
                                                            bg="#f8f9fa", fg="#2c3e50",
                                                            wrap=tk.WORD)
        self.tempmail_result_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Copy button
        copy_frame = tk.Frame(result_frame, bg='#ffffff')
        copy_frame.pack(fill=tk.X, padx=5, pady=(0, 5))
        
        copy_btn = tk.Button(copy_frame, text="Sao ch√©p k·∫øt qu·∫£", 
                            font=("Segoe UI", 9, "bold"),
                            bg='#f39c12', fg='white',
                            relief='flat', borderwidth=0,
                            padx=15, pady=5,
                            command=self.copy_tempmail_result)
        copy_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(copy_btn, '#f39c12', '#d35400')
        
        # Clear button
        clear_btn = tk.Button(copy_frame, text="X√≥a k·∫øt qu·∫£", 
                             font=("Segoe UI", 9, "bold"),
                             bg='#95a5a6', fg='white',
                             relief='flat', borderwidth=0,
                             padx=15, pady=5,
                             command=lambda: self.tempmail_result_text.delete(1.0, tk.END))
        clear_btn.pack(side=tk.LEFT, padx=5)
        self.add_hover_effect(clear_btn, '#95a5a6', '#7f8c8d')
        
        # L∆∞u tr·ªØ danh s√°ch email
        self.email_data_list = []
        
        # N·∫øu ƒë√£ c√≥ token, t·ª± ƒë·ªông k·∫øt n·ªëi
        if self.tempmail_api_token.get():
            self.root.after(1000, self.connect_tempmail_api)

    def toggle_extension_input(self):
        """B·∫≠t/t·∫Øt ph·∫ßn nh·∫≠p s·ªë m·ªü r·ªông d·ª±a tr√™n checkbox"""
        if self.use_extension.get():
            for widget in self.extension_frame.winfo_children():
                widget.configure(state=tk.NORMAL)
        else:
            for widget in self.extension_frame.winfo_children():
                widget.configure(state=tk.DISABLED)

    def generate_single_email(self):
        """T·∫°o m·ªôt email ng·∫´u nhi√™n"""
        base_email = self.email_base.get().strip()
        
        if not base_email:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ph·∫ßn ƒë·∫ßu email!")
            return
            
        try:
            # Ki·ªÉm tra xem c√≥ s·ª≠ d·ª•ng s·ªë m·ªü r·ªông kh√¥ng
            use_extension = self.use_extension.get()
            
            if use_extension:
                max_extension = int(self.email_max_extension.get())
                if max_extension <= 0:
                    raise ValueError("S·ªë m·ªü r·ªông ph·∫£i l·ªõn h∆°n 0")
            else:
                max_extension = 0
                
            from features.email_generator import generate_extended_email
            email = generate_extended_email(base_email, max_extension, use_extension)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            self.email_result_text.delete(1.0, tk.END)
            self.email_result_text.insert(tk.END, email)
            self.email_result = email
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o email: {str(e)}")
    
    def generate_multiple_emails(self):
        """T·∫°o nhi·ªÅu email ng·∫´u nhi√™n"""
        base_email = self.email_base.get().strip()
        
        if not base_email:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ph·∫ßn ƒë·∫ßu email!")
            return
            
        try:
            # Ki·ªÉm tra xem c√≥ s·ª≠ d·ª•ng s·ªë m·ªü r·ªông kh√¥ng
            use_extension = self.use_extension.get()
            
            if use_extension:
                max_extension = int(self.email_max_extension.get())
                if max_extension <= 0:
                    raise ValueError("S·ªë m·ªü r·ªông ph·∫£i l·ªõn h∆°n 0")
            else:
                max_extension = 0
                
            count = self.email_count.get()
            if count <= 0 or count > 100:
                messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng email ph·∫£i t·ª´ 1 ƒë·∫øn 100!")
                return
                
            from features.email_generator import generate_multiple_emails
            emails = generate_multiple_emails(base_email, count, max_extension, use_extension)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            self.email_result_text.delete(1.0, tk.END)
            result_text = "\n".join(emails)
            self.email_result_text.insert(tk.END, result_text)
            self.email_result = result_text
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o email: {str(e)}")
    
    def copy_email_result(self):
        """Sao ch√©p k·∫øt qu·∫£ email v√†o clipboard"""
        result = self.email_result_text.get(1.0, tk.END).strip()
        
        if not result:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ sao ch√©p!")
            return
            
        self.root.clipboard_clear()
        self.root.clipboard_append(result)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ sao ch√©p k·∫øt qu·∫£ v√†o clipboard!")

    def connect_tempmail_api(self):
        """K·∫øt n·ªëi ƒë·∫øn TempMail API"""
        api_token = self.tempmail_api_token.get().strip()
        
        if not api_token:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API Token!")
            return
            
        try:
            from features.tempmail_api import TempMailAPI
            
            # T·∫°o ƒë·ªëi t∆∞·ª£ng API v√† ki·ªÉm tra k·∫øt n·ªëi
            api = TempMailAPI(api_token)
            result = api.get_user_info()
            
            if result['error']:
                self.tempmail_status.set("L·ªói k·∫øt n·ªëi")
                self.tempmail_status_label.config(fg='#e74c3c')
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"L·ªói: {result['message']}")
                return
                
            # Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng
            user_data = result['data']
            self.tempmail_status.set("ƒê√£ k·∫øt n·ªëi")
            self.tempmail_status_label.config(fg='#27ae60')
            
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"K·∫øt n·ªëi th√†nh c√¥ng!\n\n")
            self.tempmail_result_text.insert(tk.END, f"Th√¥ng tin ng∆∞·ªùi d√πng:\n")
            self.tempmail_result_text.insert(tk.END, f"T√™n: {user_data.get('name', 'Kh√¥ng c√≥')}\n")
            self.tempmail_result_text.insert(tk.END, f"Email: {user_data.get('email', 'Kh√¥ng c√≥')}\n")
            
            # L∆∞u API token v√†o bi·∫øn instance ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
            self._tempmail_api = api
            
            # L∆∞u API token v√†o c·∫•u h√¨nh
            self.config_manager.set('tempmail_api_token', api_token)
            
            # L·∫•y danh s√°ch t√™n mi·ªÅn
            self.refresh_domains()
            
        except Exception as e:
            self.tempmail_status.set("L·ªói")
            self.tempmail_status_label.config(fg='#e74c3c')
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"L·ªói: {str(e)}")
    
    def refresh_domains(self):
        """L·∫•y danh s√°ch t√™n mi·ªÅn t·ª´ API"""
        if not hasattr(self, '_tempmail_api'):
            if not self.tempmail_api_token.get().strip():
                messagebox.showerror("L·ªói", "Vui l√≤ng k·∫øt n·ªëi API tr∆∞·ªõc!")
                return
            else:
                # Th·ª≠ k·∫øt n·ªëi l·∫°i
                self.connect_tempmail_api()
                if not hasattr(self, '_tempmail_api'):
                    return
            
        try:
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, "ƒêang l·∫•y danh s√°ch t√™n mi·ªÅn...\n")
            self.root.update()
            
            result = self._tempmail_api.get_domains()
            
            if result['error']:
                # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói nh∆∞ng v·∫´n s·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y danh s√°ch t√™n mi·ªÅn: {result['message']}\n")
                self.tempmail_result_text.insert(tk.END, "ƒê√£ s·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh.")
                
                # S·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh
                self.domain_combobox['values'] = self.default_domains
                if not self.tempmail_domain.get():
                    self.tempmail_domain.set(self.default_domains[0])
                return
                
            # L·∫•y danh s√°ch t√™n mi·ªÅn
            domains = result['data']
            if domains and isinstance(domains, list):
                # K·∫øt h·ª£p danh s√°ch m·∫∑c ƒë·ªãnh v√† danh s√°ch t·ª´ API
                all_domains = list(set(self.default_domains + domains))
                self.tempmail_domains = all_domains
                
                # C·∫≠p nh·∫≠t combobox
                self.domain_combobox['values'] = self.tempmail_domains
                
                # Gi·ªØ nguy√™n t√™n mi·ªÅn ƒë√£ ch·ªçn n·∫øu c√≥
                if not self.tempmail_domain.get() and self.tempmail_domains:
                    self.tempmail_domain.set(self.tempmail_domains[0])
                    
                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, "‚úÖ ƒê√£ c·∫≠p nh·∫≠t danh s√°ch t√™n mi·ªÅn.\n")
                self.tempmail_result_text.insert(tk.END, f"S·ªë l∆∞·ª£ng t√™n mi·ªÅn: {len(self.tempmail_domains)}")
            else:
                # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ API, s·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh
                self.domain_combobox['values'] = self.default_domains
                if not self.tempmail_domain.get():
                    self.tempmail_domain.set(self.default_domains[0])
                    
                # Hi·ªÉn th·ªã th√¥ng b√°o
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, "‚ÑπÔ∏è S·ª≠ d·ª•ng danh s√°ch t√™n mi·ªÅn m·∫∑c ƒë·ªãnh.\n")
            
        except Exception as e:
            # N·∫øu c√≥ l·ªói, s·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh
            self.domain_combobox['values'] = self.default_domains
            if not self.tempmail_domain.get():
                self.tempmail_domain.set(self.default_domains[0])
                
            # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"‚ö†Ô∏è L·ªói: {str(e)}\n")
            self.tempmail_result_text.insert(tk.END, "ƒê√£ s·ª≠ d·ª•ng danh s√°ch t√™n mi·ªÅn m·∫∑c ƒë·ªãnh.")
    
    def create_tempmail(self):
        """T·∫°o email m·ªõi tr√™n TempMail"""
        if not hasattr(self, '_tempmail_api'):
            messagebox.showerror("L·ªói", "Vui l√≤ng k·∫øt n·ªëi API tr∆∞·ªõc!")
            return
            
        try:
            username = self.tempmail_username.get().strip() or None
            domain = self.tempmail_domain.get().strip() or None
            
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, "ƒêang t·∫°o email m·ªõi...\n")
            self.root.update()
            
            result = self._tempmail_api.create_email(username, domain)
            
            if result['error']:
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"L·ªói: {result['message']}")
                return
                
            # Hi·ªÉn th·ªã th√¥ng tin email m·ªõi
            email_data = result['data']
            
            # Debug: Hi·ªÉn th·ªã to√†n b·ªô d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
            print("DEBUG - Email data:", email_data)
            
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"‚úÖ T·∫†O EMAIL TH√ÄNH C√îNG!\n\n")
            
            # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu v√† hi·ªÉn th·ªã th√¥ng tin ph√π h·ª£p
            if isinstance(email_data, dict):
                # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng
                email_address = email_data.get('email')
                if email_address:
                    self.tempmail_result_text.insert(tk.END, f"üìß Email: {email_address}\n")
                    
                    # T·ª± ƒë·ªông sao ch√©p v√†o clipboard
                    self.root.clipboard_clear()
                    self.root.clipboard_append(email_address)
                    self.tempmail_result_text.insert(tk.END, f"üìã ƒê√£ sao ch√©p v√†o clipboard!\n\n")
                    
                id_value = email_data.get('id')
                if id_value:
                    self.tempmail_result_text.insert(tk.END, f"üÜî ID: {id_value}\n")
                    
                created_at = email_data.get('created_at')
                if created_at:
                    self.tempmail_result_text.insert(tk.END, f"üïí Ng√†y t·∫°o: {created_at}\n")
            elif isinstance(email_data, str):
                # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ chu·ªói
                self.tempmail_result_text.insert(tk.END, f"üìß Email: {email_data}\n")
                
                # T·ª± ƒë·ªông sao ch√©p v√†o clipboard
                self.root.clipboard_clear()
                self.root.clipboard_append(email_data)
                self.tempmail_result_text.insert(tk.END, f"üìã ƒê√£ sao ch√©p v√†o clipboard!\n")
            else:
                # Hi·ªÉn th·ªã to√†n b·ªô d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
                self.tempmail_result_text.insert(tk.END, f"D·ªØ li·ªáu: {str(email_data)}\n")
            
            # Th√¥ng b√°o th√†nh c√¥ng
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ t·∫°o email m·ªõi th√†nh c√¥ng!")
            
        except Exception as e:
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói: {str(e)}")
            
    def list_tempmail(self):
        """Li·ªát k√™ danh s√°ch email c·ªßa ng∆∞·ªùi d√πng"""
        if not hasattr(self, '_tempmail_api'):
            messagebox.showerror("L·ªói", "Vui l√≤ng k·∫øt n·ªëi API tr∆∞·ªõc!")
            return
            
        try:
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, "ƒêang l·∫•y danh s√°ch email...\n")
            self.root.update()
            
            result = self._tempmail_api.get_email_list()
            
            if result['error']:
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói: {result['message']}")
                return
                
            # X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
            response_data = result['data']
            
            # Debug: Hi·ªÉn th·ªã to√†n b·ªô d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
            print("DEBUG - Emails data:", response_data)
            
            # X√≥a d·ªØ li·ªáu c≈©
            self.email_listbox.delete(0, tk.END)
            self.email_data_list = []
            
            # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
            emails = []
            
            # X·ª≠ l√Ω nhi·ªÅu c·∫•u tr√∫c d·ªØ li·ªáu kh√°c nhau
            if isinstance(response_data, dict):
                if 'data' in response_data:
                    # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ d·∫°ng {'success': True, 'message': '...', 'data': [...]}
                    emails = response_data.get('data', [])
                elif 'success' in response_data and response_data.get('success') and 'data' in response_data:
                    # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ d·∫°ng {'success': True, 'message': 'Th√†nh c√¥ng', 'data': [...]}
                    emails = response_data.get('data', [])
                elif 'items' in response_data:
                    # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ d·∫°ng {'items': [...], 'pagination': {...}}
                    emails = response_data.get('items', [])
                else:
                    # N·∫øu kh√¥ng c√≥ c·∫•u tr√∫c nh·∫≠n d·∫°ng ƒë∆∞·ª£c, hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc
                    self.tempmail_result_text.delete(1.0, tk.END)
                    self.tempmail_result_text.insert(tk.END, f"üìã D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:\n\n{str(response_data)}\n\n")
                    
                    # Th·ª≠ x·ª≠ l√Ω m·ªôt s·ªë tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
                    if isinstance(response_data, dict):
                        for key, value in response_data.items():
                            if isinstance(value, list) and len(value) > 0:
                                emails = value
                                self.tempmail_result_text.insert(tk.END, f"‚úÖ ƒê√£ t√¨m th·∫•y danh s√°ch email trong tr∆∞·ªùng '{key}'.\n\n")
                                break
                    
                    if not emails:
                        self.tempmail_result_text.insert(tk.END, "‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh c·∫•u tr√∫c d·ªØ li·ªáu. Vui l√≤ng li√™n h·ªá nh√† ph√°t tri·ªÉn.")
                        return
            elif isinstance(response_data, list):
                # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ tr·ª±c ti·∫øp danh s√°ch
                emails = response_data
            else:
                # Tr∆∞·ªùng h·ª£p kh√°c
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"‚ùì Kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu: {str(response_data)}")
                return
            
            # Hi·ªÉn th·ªã danh s√°ch email
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"üìã DANH S√ÅCH EMAIL C·ª¶A B·∫†N:\n\n")
            
            if not emails:
                self.tempmail_result_text.insert(tk.END, "Kh√¥ng c√≥ email n√†o.")
                return
                
            # Th√™m email v√†o listbox v√† l∆∞u d·ªØ li·ªáu
            for i, email in enumerate(emails, 1):
                if isinstance(email, dict):
                    email_address = email.get('email', 'N/A')
                    self.email_listbox.insert(tk.END, f"{email_address}")
                    self.email_data_list.append(email)
                    
                    # Hi·ªÉn th·ªã th√¥ng tin trong k·∫øt qu·∫£
                    self.tempmail_result_text.insert(tk.END, f"{i}. üìß {email_address}\n")
                    
                    id_value = email.get('id')
                    if id_value:
                        self.tempmail_result_text.insert(tk.END, f"   üÜî ID: {id_value}\n")
                        
                    created_at = email.get('created_at')
                    if created_at:
                        self.tempmail_result_text.insert(tk.END, f"   üïí Ng√†y t·∫°o: {created_at}\n")
                        
                    self.tempmail_result_text.insert(tk.END, "\n")
                elif isinstance(email, str):
                    self.email_listbox.insert(tk.END, email)
                    self.email_data_list.append({'email': email})
                    self.tempmail_result_text.insert(tk.END, f"{i}. üìß {email}\n\n")
            
        except Exception as e:
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói: {str(e)}")
    
    def on_email_selected(self, event):
        """X·ª≠ l√Ω s·ª± ki·ªán khi ch·ªçn email trong listbox"""
        if not self.email_listbox.curselection():
            return
            
        # L·∫•y ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn
        index = self.email_listbox.curselection()[0]
        
        # Hi·ªÉn th·ªã th√¥ng tin email ƒë∆∞·ª£c ch·ªçn
        if 0 <= index < len(self.email_data_list):
            email_data = self.email_data_list[index]
            
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"üìß Email ƒë∆∞·ª£c ch·ªçn:\n\n")
            
            email_address = email_data.get('email', 'N/A')
            self.tempmail_result_text.insert(tk.END, f"Email: {email_address}\n")
            
            id_value = email_data.get('id')
            if id_value:
                self.tempmail_result_text.insert(tk.END, f"ID: {id_value}\n")
                
            created_at = email_data.get('created_at')
            if created_at:
                self.tempmail_result_text.insert(tk.END, f"Ng√†y t·∫°o: {created_at}\n")
                
            # T·ª± ƒë·ªông sao ch√©p email v√†o clipboard
            self.root.clipboard_clear()
            self.root.clipboard_append(email_address)
            self.tempmail_result_text.insert(tk.END, f"\nüìã ƒê√£ sao ch√©p email v√†o clipboard!\n")
    
    def read_selected_email(self):
        """ƒê·ªçc th∆∞ c·ªßa email ƒë∆∞·ª£c ch·ªçn"""
        if not self.email_listbox.curselection():
            messagebox.showinfo("Th√¥ng b√°o", "Vui l√≤ng ch·ªçn m·ªôt email!")
            return
            
        # L·∫•y ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn
        index = self.email_listbox.curselection()[0]
        
        # Ki·ªÉm tra d·ªØ li·ªáu email
        if 0 <= index < len(self.email_data_list):
            email_data = self.email_data_list[index]
            email_id = email_data.get('id')
            
            if not email_id:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y ID c·ªßa email!")
                return
                
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"ƒêang l·∫•y th∆∞ c·ªßa email {email_data.get('email')}...\n")
            self.root.update()
            
            try:
                # G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch th∆∞
                result = self._tempmail_api.get_messages(email_id)
                
                if result['error']:
                    self.tempmail_result_text.delete(1.0, tk.END)
                    self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói: {result['message']}")
                    return
                    
                # X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
                response_data = result['data']

                # Debug: In ra c·∫•u tr√∫c d·ªØ li·ªáu
                print(f"DEBUG - Messages response data: {response_data}")
                print(f"DEBUG - Response data type: {type(response_data)}")

                # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
                messages = []

                if isinstance(response_data, list):
                    # API ƒë√£ tr·∫£ v·ªÅ danh s√°ch th∆∞ tr·ª±c ti·∫øp (ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong TempMailAPI)
                    messages = response_data
                    print(f"DEBUG - Using direct list, found {len(messages)} messages")
                elif isinstance(response_data, dict):
                    print(f"DEBUG - Response is dict with keys: {list(response_data.keys())}")

                    if 'data' in response_data:
                        # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ d·∫°ng {'success': True, 'message': '...', 'data': [...]}
                        messages = response_data.get('data', [])
                        print(f"DEBUG - Using 'data' field, found {len(messages)} messages")
                    elif 'items' in response_data:
                        # Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ d·∫°ng {'items': [...], 'pagination': {...}}
                        messages = response_data.get('items', [])
                        print(f"DEBUG - Using 'items' field, found {len(messages)} messages")
                    else:
                        # Hi·ªÉn th·ªã c·∫•u tr√∫c ƒë·ªÉ debug
                        print(f"DEBUG - Unknown dict structure: {response_data}")
                        self.tempmail_result_text.delete(1.0, tk.END)
                        self.tempmail_result_text.insert(tk.END, f"üì¨ TH∆Ø C·ª¶A {email_data.get('email')}:\n\n")
                        self.tempmail_result_text.insert(tk.END, f"‚ö†Ô∏è C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng mong ƒë·ª£i:\n{str(response_data)}")
                        return
                else:
                    print(f"DEBUG - Unknown response type: {type(response_data)}")
                    self.tempmail_result_text.delete(1.0, tk.END)
                    self.tempmail_result_text.insert(tk.END, f"üì¨ TH∆Ø C·ª¶A {email_data.get('email')}:\n\n")
                    self.tempmail_result_text.insert(tk.END, f"‚ö†Ô∏è D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá: {str(response_data)}")
                    return

                # Hi·ªÉn th·ªã danh s√°ch th∆∞
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"üì¨ TH∆Ø C·ª¶A {email_data.get('email')}:\n\n")

                if not messages:
                    self.tempmail_result_text.insert(tk.END, "Kh√¥ng c√≥ th∆∞ n√†o.")
                    return
                
                # Debug: In ra th√¥ng tin v·ªÅ messages
                print(f"DEBUG - Processing {len(messages)} messages")
                for idx, msg in enumerate(messages):
                    print(f"DEBUG - Message {idx}: type={type(msg)}, content={msg}")

                # Hi·ªÉn th·ªã danh s√°ch th∆∞
                for i, message in enumerate(messages, 1):
                    print(f"DEBUG - Processing message {i}: {message}")

                    if isinstance(message, dict):
                        # L·∫•y th√¥ng tin t·ª´ message
                        message_id = message.get('id')
                        subject = message.get('subject', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
                        sender = message.get('from', 'Kh√¥ng r√µ ng∆∞·ªùi g·ª≠i')
                        date = message.get('date', 'Kh√¥ng r√µ th·ªùi gian')

                        print(f"DEBUG - Message details: id={message_id}, subject={subject}")

                        # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
                        self.tempmail_result_text.insert(tk.END, f"{i}. üìù {subject}\n")
                        self.tempmail_result_text.insert(tk.END, f"   üë§ T·ª´: {sender}\n")
                        self.tempmail_result_text.insert(tk.END, f"   üïí Ng√†y: {date}\n")

                        # N·∫øu c√≥ ID tin nh·∫Øn, th√™m n√∫t xem chi ti·∫øt
                        if message_id:
                            # Th√™m n√∫t xem chi ti·∫øt
                            detail_button_tag = f"detail_btn_{message_id}"
                            self.tempmail_result_text.insert(tk.END, f"   ")
                            self.tempmail_result_text.insert(tk.END, "üìã Xem chi ti·∫øt", detail_button_tag)
                            self.tempmail_result_text.insert(tk.END, "\n")

                            # ƒê·ªãnh d·∫°ng n√∫t
                            self.tempmail_result_text.tag_config(
                                detail_button_tag,
                                foreground="blue",
                                underline=True,
                                font=("Segoe UI", 9, "bold")
                            )

                            # Th√™m s·ª± ki·ªán click
                            self.tempmail_result_text.tag_bind(
                                detail_button_tag,
                                "<Button-1>",
                                lambda e, msg_id=message_id, subj=subject: self.view_message_detail(msg_id, subj)
                            )

                            # Th√™m con tr·ªè tay khi hover
                            self.tempmail_result_text.tag_bind(
                                detail_button_tag,
                                "<Enter>",
                                lambda e: self.tempmail_result_text.config(cursor="hand2")
                            )

                            self.tempmail_result_text.tag_bind(
                                detail_button_tag,
                                "<Leave>",
                                lambda e: self.tempmail_result_text.config(cursor="")
                            )

                            # Hi·ªÉn th·ªã preview n·ªôi dung v·ªõi m√£ verification code n·∫øu c√≥
                            preview_text = self.get_message_preview(message)
                            if preview_text:
                                self.tempmail_result_text.insert(tk.END, f"   üí¨ Preview: {preview_text}\n")

                                # N·∫øu preview ch·ª©a m√£ verification code, th√™m n√∫t copy nhanh
                                if "üîë M√£ x√°c th·ª±c:" in preview_text:
                                    # Tr√≠ch xu·∫•t m√£ t·ª´ preview text
                                    import re
                                    code_match = re.search(r'üîë M√£ x√°c th·ª±c: (\d{4,8})', preview_text)
                                    if code_match:
                                        verification_code = code_match.group(1)

                                        # Th√™m n√∫t copy nhanh
                                        quick_copy_tag = f"quick_copy_{message_id}_{verification_code}"
                                        self.tempmail_result_text.insert(tk.END, f"   ")
                                        self.tempmail_result_text.insert(tk.END, f"üìã Copy m√£ {verification_code}", quick_copy_tag)
                                        self.tempmail_result_text.insert(tk.END, "\n")

                                        # ƒê·ªãnh d·∫°ng n√∫t copy
                                        self.tempmail_result_text.tag_config(
                                            quick_copy_tag,
                                            foreground="#e67e22",
                                            background="#fff3cd",
                                            underline=True,
                                            font=("Segoe UI", 9, "bold")
                                        )

                                        # Bind s·ª± ki·ªán click ƒë·ªÉ copy m√£
                                        self.tempmail_result_text.tag_bind(
                                            quick_copy_tag,
                                            "<Button-1>",
                                            lambda e, code=verification_code: self.copy_verification_code(code)
                                        )

                                        # Th√™m con tr·ªè tay khi hover
                                        self.tempmail_result_text.tag_bind(
                                            quick_copy_tag,
                                            "<Enter>",
                                            lambda e: self.tempmail_result_text.config(cursor="hand2")
                                        )

                                        self.tempmail_result_text.tag_bind(
                                            quick_copy_tag,
                                            "<Leave>",
                                            lambda e: self.tempmail_result_text.config(cursor="")
                                        )
                            else:
                                self.tempmail_result_text.insert(tk.END, f"   üí¨ B·∫•m 'Xem chi ti·∫øt' ƒë·ªÉ ƒë·ªçc n·ªôi dung\n")
                        else:
                            self.tempmail_result_text.insert(tk.END, f"   ‚ö†Ô∏è Kh√¥ng c√≥ ID ƒë·ªÉ xem chi ti·∫øt\n")

                        self.tempmail_result_text.insert(tk.END, "\n")
                    elif isinstance(message, str):
                        # N·∫øu message l√† chu·ªói, c√≥ th·ªÉ l√† t√™n field
                        print(f"DEBUG - String message: {message}")
                        if message in ['items', 'pagination']:
                            # B·ªè qua c√°c field metadata
                            continue
                        else:
                            # Hi·ªÉn th·ªã chu·ªói kh√°c
                            self.tempmail_result_text.insert(tk.END, f"{i}. üìÑ {message}\n\n")
                    else:
                        # N·∫øu message kh√¥ng ph·∫£i l√† dict ho·∫∑c string, hi·ªÉn th·ªã d·∫°ng chu·ªói
                        print(f"DEBUG - Unknown message type: {type(message)}")
                        self.tempmail_result_text.insert(tk.END, f"{i}. ‚ùì {str(message)}\n\n")
                
            except Exception as e:
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói: {str(e)}")
    
    def delete_selected_email(self):
        """X√≥a email ƒë∆∞·ª£c ch·ªçn"""
        if not self.email_listbox.curselection():
            messagebox.showinfo("Th√¥ng b√°o", "Vui l√≤ng ch·ªçn m·ªôt email!")
            return
            
        # L·∫•y ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn
        index = self.email_listbox.curselection()[0]
        
        # Ki·ªÉm tra d·ªØ li·ªáu email
        if 0 <= index < len(self.email_data_list):
            email_data = self.email_data_list[index]
            email_id = email_data.get('id')
            email_address = email_data.get('email', 'N/A')
            
            if not email_id:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y ID c·ªßa email!")
                return
                
            # X√°c nh·∫≠n x√≥a
            confirm = messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a email {email_address}?")
            if not confirm:
                return
                
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"ƒêang x√≥a email {email_address}...\n")
            self.root.update()
            
            try:
                # G·ªçi API ƒë·ªÉ x√≥a email
                result = self._tempmail_api.delete_email(email_id)

                if result['error']:
                    self.tempmail_result_text.delete(1.0, tk.END)

                    # Ki·ªÉm tra n·∫øu l√† l·ªói kh√¥ng h·ªó tr·ª£
                    if result.get('unsupported', False):
                        # Hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫∑c bi·ªát cho l·ªói kh√¥ng h·ªó tr·ª£
                        self.tempmail_result_text.insert(tk.END, f"‚ö†Ô∏è Ch·ª©c nƒÉng x√≥a email ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi API tempmail.id.vn\n\n")
                        self.tempmail_result_text.insert(tk.END, f"üìù ƒê·ªÉ x√≥a email {email_address}, b·∫°n c√≥ th·ªÉ:\n")
                        self.tempmail_result_text.insert(tk.END, f"1. Truy c·∫≠p https://tempmail.id.vn\n")
                        self.tempmail_result_text.insert(tk.END, f"2. ƒêƒÉng nh·∫≠p v·ªõi API token c·ªßa b·∫°n\n")
                        self.tempmail_result_text.insert(tk.END, f"3. X√≥a email th·ªß c√¥ng\n\n")
                        self.tempmail_result_text.insert(tk.END, f"üîÑ Ho·∫∑c t·∫°o email m·ªõi ƒë·ªÉ thay th·∫ø")

                        # V·∫´n x√≥a email kh·ªèi danh s√°ch local ƒë·ªÉ tr√°nh hi·ªÉn th·ªã
                        self.email_listbox.delete(index)
                        self.email_data_list.pop(index)
                    else:
                        # Hi·ªÉn th·ªã l·ªói th√¥ng th∆∞·ªùng
                        self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói: {result['message']}")
                    return

                # X√≥a email kh·ªèi listbox v√† danh s√°ch
                self.email_listbox.delete(index)
                self.email_data_list.pop(index)

                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"‚úÖ ƒê√£ x√≥a email {email_address} th√†nh c√¥ng!")

            except Exception as e:
                self.tempmail_result_text.delete(1.0, tk.END)
                self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói: {str(e)}")

    def check_delete_support(self):
        """Ki·ªÉm tra xem API c√≥ h·ªó tr·ª£ x√≥a email kh√¥ng"""
        if not hasattr(self, '_tempmail_api'):
            messagebox.showerror("L·ªói", "Vui l√≤ng k·∫øt n·ªëi API tr∆∞·ªõc!")
            return

        try:
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang ki·ªÉm tra
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, "üîç ƒêang ki·ªÉm tra kh·∫£ nƒÉng h·ªó tr·ª£ x√≥a email c·ªßa API...\n")
            self.root.update()

            # G·ªçi API ƒë·ªÉ ki·ªÉm tra
            result = self._tempmail_api.check_delete_support()

            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, "üîç K·∫æT QU·∫¢ KI·ªÇM TRA API:\n\n")

            if result['error']:
                self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói khi ki·ªÉm tra: {result['message']}\n\n")
                self.tempmail_result_text.insert(tk.END, "‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh kh·∫£ nƒÉng h·ªó tr·ª£ x√≥a email.")
            else:
                supports_delete = result.get('supports_delete', False)
                allowed_methods = result.get('allowed_methods', 'Kh√¥ng x√°c ƒë·ªãnh')

                if supports_delete:
                    self.tempmail_result_text.insert(tk.END, "‚úÖ API h·ªó tr·ª£ x√≥a email (DELETE method)\n\n")
                    self.tempmail_result_text.insert(tk.END, "üéâ B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng x√≥a email b√¨nh th∆∞·ªùng.")
                else:
                    self.tempmail_result_text.insert(tk.END, "‚ùå API KH√îNG h·ªó tr·ª£ x√≥a email (DELETE method)\n\n")
                    self.tempmail_result_text.insert(tk.END, "üìù ƒê·ªÉ x√≥a email, b·∫°n c·∫ßn:\n")
                    self.tempmail_result_text.insert(tk.END, "1. Truy c·∫≠p https://tempmail.id.vn\n")
                    self.tempmail_result_text.insert(tk.END, "2. ƒêƒÉng nh·∫≠p v·ªõi API token c·ªßa b·∫°n\n")
                    self.tempmail_result_text.insert(tk.END, "3. X√≥a email th·ªß c√¥ng tr√™n website\n\n")
                    self.tempmail_result_text.insert(tk.END, "üîÑ Ho·∫∑c t·∫°o email m·ªõi ƒë·ªÉ thay th·∫ø")

                self.tempmail_result_text.insert(tk.END, f"\n\nüìã Th√¥ng tin k·ªπ thu·∫≠t:\n")
                self.tempmail_result_text.insert(tk.END, f"Ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c h·ªó tr·ª£: {allowed_methods}")

        except Exception as e:
            self.tempmail_result_text.delete(1.0, tk.END)
            self.tempmail_result_text.insert(tk.END, f"‚ùå L·ªói khi ki·ªÉm tra API: {str(e)}")

    def copy_tempmail_result(self):
        """Sao ch√©p k·∫øt qu·∫£ TempMail v√†o clipboard"""
        result = self.tempmail_result_text.get(1.0, tk.END).strip()
        
        if not result:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ sao ch√©p!")
            return
            
        self.root.clipboard_clear()
        self.root.clipboard_append(result)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ sao ch√©p k·∫øt qu·∫£ v√†o clipboard!")

    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()

    def view_message_detail(self, message_id, subject=""):
        """Hi·ªÉn th·ªã n·ªôi dung chi ti·∫øt c·ªßa m·ªôt th∆∞ trong c·ª≠a s·ªï m·ªõi"""
        if not message_id:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y ID c·ªßa th∆∞!")
            return
            
        try:
            # G·ªçi API ƒë·ªÉ l·∫•y n·ªôi dung th∆∞
            result = self._tempmail_api.get_message_content(message_id)
            
            if result['error']:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l·∫•y n·ªôi dung th∆∞: {result['message']}")
                return
                
            # X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ
            msg_content = result['data']
            
            # T·∫°o c·ª≠a s·ªï m·ªõi
            detail_window = tk.Toplevel(self.root)
            detail_window.title(f"N·ªôi dung th∆∞: {subject}")
            detail_window.geometry("800x600")
            detail_window.resizable(True, True)
            
            # T·∫°o frame ch·ª©a n·ªôi dung
            content_frame = tk.Frame(detail_window, bg='#ffffff')
            content_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # T·∫°o scrolled text ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung
            content_text = scrolledtext.ScrolledText(content_frame,
                                                   font=("Consolas", 10),
                                                   bg="#ffffff", fg="#2c3e50",
                                                   wrap=tk.WORD)
            content_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
            
            # X·ª≠ l√Ω n·ªôi dung tin nh·∫Øn
            if isinstance(msg_content, dict):
                # Ki·ªÉm tra c·∫•u tr√∫c API response
                if 'success' in msg_content and 'data' in msg_content:
                    # API tr·∫£ v·ªÅ c·∫•u tr√∫c {'success': True, 'data': {...}}
                    actual_content = msg_content['data']
                else:
                    actual_content = msg_content

                # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
                from_addr = actual_content.get('from', 'Kh√¥ng r√µ ng∆∞·ªùi g·ª≠i')
                to_addr = actual_content.get('to', 'Kh√¥ng r√µ ng∆∞·ªùi nh·∫≠n')
                date = actual_content.get('date', 'Kh√¥ng r√µ th·ªùi gian')
                sender_name = actual_content.get('sender_name', '')

                content_text.insert(tk.END, f"T·ª´: {sender_name} <{from_addr}>\n" if sender_name else f"T·ª´: {from_addr}\n")
                content_text.insert(tk.END, f"ƒê·∫øn: {to_addr}\n")
                content_text.insert(tk.END, f"Ng√†y: {date}\n")
                content_text.insert(tk.END, f"Ch·ªß ƒë·ªÅ: {subject}\n")
                content_text.insert(tk.END, f"\n{'-'*80}\n\n")

                # L·∫•y n·ªôi dung th∆∞ t·ª´ c√°c field kh√°c nhau
                body_content = actual_content.get('body', '')
                html_content = actual_content.get('html', '')
                text_content = actual_content.get('text', '')

                # ∆Øu ti√™n text content, sau ƒë√≥ body, cu·ªëi c√πng html
                final_content = ""
                if text_content and text_content.strip():
                    final_content = text_content
                elif body_content and body_content.strip():
                    # X·ª≠ l√Ω body content (th∆∞·ªùng l√† HTML)
                    if body_content.startswith('<!DOCTYPE') or body_content.startswith('<html'):
                        final_content = self.html_to_text(body_content)
                    else:
                        final_content = body_content
                elif html_content and html_content.strip():
                    # X·ª≠ l√Ω HTML ƒë·ªÉ chuy·ªÉn th√†nh text d·ªÖ ƒë·ªçc
                    final_content = self.html_to_text(html_content)
                else:
                    # Hi·ªÉn th·ªã to√†n b·ªô n·ªôi dung n·∫øu kh√¥ng c√≥ text, body ho·∫∑c html
                    final_content = f"N·ªôi dung g·ªëc:\n\n{str(actual_content)}"

                # Format v√† highlight n·ªôi dung v·ªõi m√£ verification code
                self.insert_formatted_email_content(content_text, final_content)
            else:
                # N·∫øu l√† chu·ªói, hi·ªÉn th·ªã tr·ª±c ti·∫øp
                content_text.insert(tk.END, str(msg_content))
            
            # T·∫°o c√°c n√∫t ch·ª©c nƒÉng
            button_frame = tk.Frame(detail_window, bg='#ffffff')
            button_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
            
            # N√∫t sao ch√©p
            copy_btn = tk.Button(button_frame, text="Sao ch√©p n·ªôi dung", 
                               font=("Segoe UI", 9, "bold"),
                               bg='#3498db', fg='white',
                               relief='flat', borderwidth=0,
                               padx=15, pady=5,
                               command=lambda: self.copy_message_content(content_text.get(1.0, tk.END)))
            copy_btn.pack(side=tk.LEFT, padx=5)
            self.add_hover_effect(copy_btn, '#3498db', '#2980b9')
            
            # N√∫t ƒë√≥ng
            close_btn = tk.Button(button_frame, text="ƒê√≥ng", 
                                font=("Segoe UI", 9, "bold"),
                                bg='#e74c3c', fg='white',
                                relief='flat', borderwidth=0,
                                padx=15, pady=5,
                                command=detail_window.destroy)
            close_btn.pack(side=tk.RIGHT, padx=5)
            self.add_hover_effect(close_btn, '#e74c3c', '#c0392b')
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã n·ªôi dung th∆∞: {str(e)}")
    
    def copy_message_content(self, content):
        """Sao ch√©p n·ªôi dung th∆∞ v√†o clipboard"""
        if not content:
            return

        self.root.clipboard_clear()
        self.root.clipboard_append(content)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ sao ch√©p n·ªôi dung th∆∞ v√†o clipboard!")

    def insert_formatted_email_content(self, text_widget, content):
        """
        Ch√®n n·ªôi dung email v·ªõi format ƒë·∫∑c bi·ªát cho m√£ verification code

        Args:
            text_widget: Widget Text ƒë·ªÉ ch√®n n·ªôi dung
            content (str): N·ªôi dung email c·∫ßn format
        """
        import re

        # C·∫•u h√¨nh c√°c tag ƒë·ªÉ highlight
        text_widget.tag_configure("verification_code",
                                background="#ffeb3b",
                                foreground="#d32f2f",
                                font=("Consolas", 14, "bold"),
                                relief="raised",
                                borderwidth=2)

        text_widget.tag_configure("verification_label",
                                foreground="#1976d2",
                                font=("Segoe UI", 11, "bold"))

        text_widget.tag_configure("code_section",
                                background="#f5f5f5",
                                foreground="#333333",
                                font=("Consolas", 10))

        # T√¨m c√°c pattern m√£ verification code ph·ªï bi·∫øn
        verification_patterns = [
            r'verification code is[:\s]*(\d{4,8})',  # "verification code is: 123456"
            r'Your verification code is[:\s]*(\d{4,8})',  # "Your verification code is: 123456"
            r'code[:\s]*(\d{4,8})',  # "code: 123456"
            r'Code[:\s]*(\d{4,8})',  # "Code: 123456"
            r'\n\n(\d{4,8})\n\n',  # M√£ ƒë·ª©ng m·ªôt m√¨nh gi·ªØa 2 d√≤ng tr·ªëng
            r'(\d{6})',  # M√£ 6 s·ªë b·∫•t k·ª≥ (ph·ªï bi·∫øn nh·∫•t)
        ]

        # T√¨m m√£ verification code
        verification_code = None
        code_match = None

        for pattern in verification_patterns:
            matches = list(re.finditer(pattern, content, re.IGNORECASE))
            if matches:
                # ∆Øu ti√™n pattern c√≥ context r√µ r√†ng h∆°n
                for match in matches:
                    code = match.group(1) if match.groups() else match.group(0)
                    # Ki·ªÉm tra m√£ c√≥ ph·∫£i l√† s·ªë v√† c√≥ ƒë·ªô d√†i h·ª£p l√Ω
                    if code.isdigit() and 4 <= len(code) <= 8:
                        verification_code = code
                        code_match = match
                        break
                if verification_code:
                    break

        if verification_code and code_match:
            # Chia n·ªôi dung th√†nh 3 ph·∫ßn: tr∆∞·ªõc m√£, m√£, sau m√£
            start_pos = code_match.start()
            end_pos = code_match.end()

            before_code = content[:start_pos]
            code_section = content[start_pos:end_pos]
            after_code = content[end_pos:]

            # Ch√®n ph·∫ßn tr∆∞·ªõc m√£
            if before_code.strip():
                text_widget.insert(tk.END, before_code)

            # T·∫°o section ƒë·∫∑c bi·ªát cho m√£ verification
            text_widget.insert(tk.END, "\n" + "="*60 + "\n")
            text_widget.insert(tk.END, "üîë M√É VERIFICATION CODE:\n", "verification_label")
            text_widget.insert(tk.END, "\n")

            # Highlight m√£ verification code
            text_widget.insert(tk.END, f"   {verification_code}   ", "verification_code")
            text_widget.insert(tk.END, "\n\n")

            # Th√™m n√∫t copy m√£
            copy_code_text = f"üìã Nh·∫•n ƒë√¢y ƒë·ªÉ copy m√£: {verification_code}"
            copy_tag = f"copy_code_{verification_code}"
            text_widget.tag_configure(copy_tag,
                                    foreground="#1976d2",
                                    font=("Segoe UI", 10, "bold", "underline"))

            text_widget.insert(tk.END, copy_code_text, copy_tag)

            # Bind s·ª± ki·ªán click ƒë·ªÉ copy m√£
            text_widget.tag_bind(copy_tag, "<Button-1>",
                               lambda e: self.copy_verification_code(verification_code))
            text_widget.tag_bind(copy_tag, "<Enter>",
                               lambda e: text_widget.config(cursor="hand2"))
            text_widget.tag_bind(copy_tag, "<Leave>",
                               lambda e: text_widget.config(cursor=""))

            text_widget.insert(tk.END, "\n" + "="*60 + "\n\n")

            # Ch√®n ph·∫ßn sau m√£
            if after_code.strip():
                text_widget.insert(tk.END, after_code)
        else:
            # Kh√¥ng t√¨m th·∫•y m√£ verification, hi·ªÉn th·ªã n·ªôi dung b√¨nh th∆∞·ªùng
            text_widget.insert(tk.END, content)

            # V·∫´n c·ªë g·∫Øng t√¨m v√† highlight c√°c s·ªë c√≥ th·ªÉ l√† m√£
            potential_codes = re.findall(r'\b\d{4,8}\b', content)
            if potential_codes:
                text_widget.insert(tk.END, f"\n\nüí° C√°c s·ªë c√≥ th·ªÉ l√† m√£ verification: {', '.join(set(potential_codes))}")

    def copy_verification_code(self, code):
        """Sao ch√©p m√£ verification code v√†o clipboard"""
        try:
            self.root.clipboard_clear()
            self.root.clipboard_append(code)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ sao ch√©p m√£ {code} v√†o clipboard!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ sao ch√©p m√£: {str(e)}")

    def get_message_preview(self, message):
        """
        T·∫°o preview n·ªôi dung th∆∞, ƒë·∫∑c bi·ªát highlight m√£ verification code

        Args:
            message (dict): Th√¥ng tin th∆∞

        Returns:
            str: Preview text ho·∫∑c None n·∫øu kh√¥ng c√≥ preview
        """
        import re

        try:
            # L·∫•y c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ª©a n·ªôi dung
            preview_content = ""

            # Th·ª≠ l·∫•y t·ª´ c√°c tr∆∞·ªùng kh√°c nhau
            for field in ['preview', 'snippet', 'body_preview', 'text_preview', 'subject']:
                if field in message and message[field]:
                    preview_content = str(message[field])
                    break

            # N·∫øu kh√¥ng c√≥ preview s·∫µn, th·ª≠ t·∫°o t·ª´ subject
            if not preview_content and 'subject' in message:
                subject = message['subject']
                if any(keyword in subject.lower() for keyword in ['verification', 'code', 'confirm', 'verify']):
                    preview_content = f"üìß {subject}"

            if not preview_content:
                return None

            # T√¨m m√£ verification code trong preview
            verification_patterns = [
                r'verification code is[:\s]*(\d{4,8})',
                r'Your verification code is[:\s]*(\d{4,8})',
                r'code[:\s]*(\d{4,8})',
                r'Code[:\s]*(\d{4,8})',
                r'(\d{6})',  # M√£ 6 s·ªë
                r'(\d{4,8})',  # M√£ 4-8 s·ªë
            ]

            verification_code = None
            for pattern in verification_patterns:
                match = re.search(pattern, preview_content, re.IGNORECASE)
                if match:
                    code = match.group(1) if match.groups() else match.group(0)
                    if code.isdigit() and 4 <= len(code) <= 8:
                        verification_code = code
                        break

            # Format preview v·ªõi highlight m√£ n·∫øu c√≥
            if verification_code:
                return f"üîë M√£ x√°c th·ª±c: {verification_code}"
            else:
                # C·∫Øt ng·∫Øn preview n·∫øu qu√° d√†i
                if len(preview_content) > 50:
                    preview_content = preview_content[:47] + "..."
                return preview_content

        except Exception as e:
            print(f"DEBUG - Error in get_message_preview: {str(e)}")
            return None

    def html_to_text(self, html_content):
        """Chuy·ªÉn ƒë·ªïi HTML th√†nh text d·ªÖ ƒë·ªçc"""
        import re

        if not html_content:
            return ""

        # Lo·∫°i b·ªè c√°c comment HTML v√† conditional comments
        html_content = re.sub(r'<!--.*?-->', '', html_content, flags=re.DOTALL)
        html_content = re.sub(r'<!\[if.*?\]>.*?<!\[endif\]>', '', html_content, flags=re.DOTALL | re.IGNORECASE)

        # Lo·∫°i b·ªè c√°c th·∫ª script v√† style
        html_content = re.sub(r'<script[^>]*>.*?</script>', '', html_content, flags=re.DOTALL | re.IGNORECASE)
        html_content = re.sub(r'<style[^>]*>.*?</style>', '', html_content, flags=re.DOTALL | re.IGNORECASE)

        # Lo·∫°i b·ªè c√°c th·∫ª meta, link, title trong head
        html_content = re.sub(r'<head[^>]*>.*?</head>', '', html_content, flags=re.DOTALL | re.IGNORECASE)

        # Lo·∫°i b·ªè c√°c div ·∫©n (th∆∞·ªùng ch·ª©a tracking ho·∫∑c preheader text)
        html_content = re.sub(r'<div[^>]*style="[^"]*display:\s*none[^"]*"[^>]*>.*?</div>', '', html_content, flags=re.DOTALL | re.IGNORECASE)
        html_content = re.sub(r'<div[^>]*style="[^"]*max-height:\s*0[^"]*"[^>]*>.*?</div>', '', html_content, flags=re.DOTALL | re.IGNORECASE)

        # Thay th·∫ø c√°c th·∫ª heading b·∫±ng text c√≥ format
        html_content = re.sub(r'<h([1-6])[^>]*>(.*?)</h[1-6]>', r'\n\n=== \2 ===\n\n', html_content, flags=re.IGNORECASE | re.DOTALL)

        # Thay th·∫ø c√°c th·∫ª paragraph v√† div
        html_content = re.sub(r'</(p|div)>', '\n\n', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'<(p|div)[^>]*>', '\n', html_content, flags=re.IGNORECASE)

        # Thay th·∫ø br
        html_content = re.sub(r'<br[^>]*/?>', '\n', html_content, flags=re.IGNORECASE)

        # Thay th·∫ø c√°c th·∫ª list
        html_content = re.sub(r'<li[^>]*>', '\n‚Ä¢ ', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'</li>', '', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'</(ul|ol)>', '\n', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'<(ul|ol)[^>]*>', '\n', html_content, flags=re.IGNORECASE)

        # Thay th·∫ø c√°c th·∫ª table
        html_content = re.sub(r'</(table|tbody|thead|tfoot)>', '\n', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'<(table|tbody|thead|tfoot)[^>]*>', '\n', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'<tr[^>]*>', '\n', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'</tr>', '', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'<td[^>]*>', ' | ', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'</td>', '', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'<th[^>]*>', ' | ', html_content, flags=re.IGNORECASE)
        html_content = re.sub(r'</th>', '', html_content, flags=re.IGNORECASE)

        # Thay th·∫ø c√°c th·∫ª link - ch·ªâ hi·ªÉn th·ªã text, b·ªè URL d√†i
        html_content = re.sub(r'<a[^>]*href=["\']([^"\']*)["\'][^>]*>(.*?)</a>', r'\2', html_content, flags=re.IGNORECASE | re.DOTALL)

        # Thay th·∫ø c√°c th·∫ª format
        html_content = re.sub(r'<(strong|b)[^>]*>(.*?)</(strong|b)>', r'**\2**', html_content, flags=re.IGNORECASE | re.DOTALL)
        html_content = re.sub(r'<(em|i)[^>]*>(.*?)</(em|i)>', r'*\2*', html_content, flags=re.IGNORECASE | re.DOTALL)

        # Lo·∫°i b·ªè t·∫•t c·∫£ c√°c th·∫ª HTML c√≤n l·∫°i
        html_content = re.sub(r'<[^>]+>', '', html_content)

        # Decode HTML entities
        html_entities = {
            '&nbsp;': ' ', '&amp;': '&', '&lt;': '<', '&gt;': '>',
            '&quot;': '"', '&#39;': "'", '&apos;': "'",
            '&mdash;': '‚Äî', '&ndash;': '‚Äì', '&hellip;': '...',
            '&copy;': '¬©', '&reg;': '¬Æ', '&trade;': '‚Ñ¢'
        }
        for entity, char in html_entities.items():
            html_content = html_content.replace(entity, char)

        # Decode numeric entities
        html_content = re.sub(r'&#(\d+);', lambda m: chr(int(m.group(1))) if int(m.group(1)) < 1114112 else '', html_content)
        html_content = re.sub(r'&#x([0-9a-fA-F]+);', lambda m: chr(int(m.group(1), 16)) if int(m.group(1), 16) < 1114112 else '', html_content)

        # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒëi·ªÅu khi·ªÉn v√† k√Ω t·ª± ·∫©n
        html_content = re.sub(r'[\u200B-\u200D\uFEFF]', '', html_content)  # Zero-width characters
        html_content = re.sub(r'[\u00AD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180E]', '', html_content)  # Soft hyphen, etc.
        html_content = re.sub(r'[\u2007\u2060\u3164\uFFA0]', ' ', html_content)  # Various spaces

        # Lo·∫°i b·ªè c√°c k√Ω t·ª± l·∫∑p l·∫°i nhi·ªÅu l·∫ßn (nh∆∞ Õè Õè Õè)
        html_content = re.sub(r'(\s*[Õè¬≠]\s*){3,}', ' ', html_content)
        html_content = re.sub(r'(\s*\|\s*){3,}', ' | ', html_content)

        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        html_content = re.sub(r'\n\s*\n\s*\n+', '\n\n', html_content)  # Lo·∫°i b·ªè d√≤ng tr·ªëng th·ª´a
        html_content = re.sub(r'[ \t]+', ' ', html_content)  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        html_content = re.sub(r'^\s+|\s+$', '', html_content, flags=re.MULTILINE)  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi d√≤ng

        # Lo·∫°i b·ªè c√°c d√≤ng ch·ªâ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát
        lines = html_content.split('\n')
        clean_lines = []
        for line in lines:
            # B·ªè qua d√≤ng ch·ªâ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát, kho·∫£ng tr·∫Øng, ho·∫∑c k√Ω t·ª± l·∫∑p
            if line.strip() and not re.match(r'^[\s\|Õè¬≠\u2007\u00AD]*$', line.strip()):
                clean_lines.append(line.strip())

        html_content = '\n'.join(clean_lines)
        html_content = re.sub(r'\n{3,}', '\n\n', html_content)  # Gi·ªõi h·∫°n t·ªëi ƒëa 2 d√≤ng tr·ªëng li√™n ti·∫øp

        return html_content.strip()
