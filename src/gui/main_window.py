# gui/main_window.py - Giao di·ªán ch√≠nh c·ªßa Lappy Lab 4.1
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
from datetime import datetime

# Import c√°c module t·ª´ core
from core.utils import get_system_info
# S·ª≠ d·ª•ng logic m·ªõi t·ª´ features.show_config
from features.show_config import get_token, get_email, UsageManager, format_subscription_type, get_token_from_config

class LappyLabApp:
    def __init__(self):
        self.root = tk.Tk()
        self.setup_window()
        self.setup_variables()
        self.setup_ui()
        self.load_account_info()
        self.check_ide_status()

    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root.title("Lappy Lab 4.1")
        self.root.geometry("900x700")
        self.root.resizable(True, True)

        # Thi·∫øt l·∫≠p icon n·∫øu c√≥
        try:
            # self.root.iconbitmap("assets/icons/icon.ico")  # Uncomment n·∫øu c√≥ file icon
            pass
        except:
            pass

        # Thi·∫øt l·∫≠p style
        style = ttk.Style()
        style.theme_use('clam')

    def setup_variables(self):
        """Thi·∫øt l·∫≠p c√°c bi·∫øn"""
        # Cursor tab variables
        self.account_email = tk.StringVar(value="ƒêang t·∫£i...")
        self.account_type = tk.StringVar(value="ƒêang t·∫£i...")
        self.account_days = tk.StringVar(value="ƒêang t·∫£i...")
        self.usage_fast = tk.StringVar(value="ƒêang t·∫£i...")
        self.usage_slow = tk.StringVar(value="ƒêang t·∫£i...")

        # Augment tab variables
        self.jetbrains_status = tk.StringVar(value="ƒêang ki·ªÉm tra...")
        self.vscode_status = tk.StringVar(value="ƒêang ki·ªÉm tra...")
        self.augment_status = tk.StringVar(value="ƒêang ki·ªÉm tra...")

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Header
        self.create_header()

        # T·∫°o notebook cho tabs
        self.create_tabs()

    def create_tabs(self):
        """T·∫°o tabs cho Cursor v√† Augment Code"""
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # Tab 1: Cursor
        self.cursor_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.cursor_frame, text="üñ±Ô∏è Cursor")
        self.setup_cursor_tab()

        # Tab 2: Augment VIP (Tool ƒë·ªÉ reset IDE telemetry)
        self.augment_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.augment_frame, text="üîß Augment VIP")
        self.setup_augment_tab()

    def setup_cursor_tab(self):
        """Thi·∫øt l·∫≠p tab Cursor"""
        # Info panels
        self.create_cursor_info_panels()

        # Function buttons
        self.create_cursor_function_buttons()

        # Log area
        self.create_cursor_log_area()

    def setup_augment_tab(self):
        """Thi·∫øt l·∫≠p tab Augment VIP (Tool reset IDE telemetry)"""
        # Info panels
        self.create_augment_info_panels()

        # Function buttons
        self.create_augment_function_buttons()

        # Log area
        self.create_augment_log_area()

    def create_header(self):
        """T·∫°o header v·ªõi th√¥ng tin h·ªá th·ªëng"""
        header_frame = ttk.Frame(self.root)
        header_frame.pack(fill=tk.X, padx=10, pady=5)

        # Title
        title_label = ttk.Label(header_frame, text="‚óè Lappy Lab",
                               font=("Arial", 16, "bold"))
        title_label.pack(side=tk.LEFT)

        # System info
        system_info = get_system_info()
        info_text = f"System: {system_info['os']} | PC: {system_info['pc_name']}"
        system_label = ttk.Label(header_frame, text=info_text)
        system_label.pack(side=tk.RIGHT)

        # Version info
        version_text = f"Version 4.1 | Released: Jun 11, 2025"
        version_label = ttk.Label(header_frame, text=version_text)
        version_label.pack(side=tk.RIGHT, padx=(0, 20))

    def create_cursor_info_panels(self):
        """T·∫°o c√°c panel th√¥ng tin cho tab Cursor"""
        info_frame = ttk.Frame(self.cursor_frame)
        info_frame.pack(fill=tk.X, padx=10, pady=5)

        # Account info panel
        account_frame = ttk.LabelFrame(info_frame, text="Th√¥ng tin t√†i kho·∫£n", padding=10)
        account_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

        ttk.Label(account_frame, text="üìß Email:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Label(account_frame, textvariable=self.account_email).grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=2)

        ttk.Label(account_frame, text="üîë G√≥i:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Label(account_frame, textvariable=self.account_type).grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=2)

        ttk.Label(account_frame, text="‚è∞ C√≤n l·∫°i:").grid(row=2, column=0, sticky=tk.W, pady=2)
        ttk.Label(account_frame, textvariable=self.account_days).grid(row=2, column=1, sticky=tk.W, padx=(10, 0), pady=2)

        # Usage info panel
        usage_frame = ttk.LabelFrame(info_frame, text="Th√¥ng tin s·ª≠ d·ª•ng", padding=10)
        usage_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))

        ttk.Label(usage_frame, text="‚≠ê Fast Response:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Label(usage_frame, textvariable=self.usage_fast).grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=2)

        ttk.Label(usage_frame, text="üìù Slow Response:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Label(usage_frame, textvariable=self.usage_slow).grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=2)

    def create_augment_info_panels(self):
        """T·∫°o c√°c panel th√¥ng tin cho tab Augment VIP"""
        info_frame = ttk.Frame(self.augment_frame)
        info_frame.pack(fill=tk.X, padx=10, pady=5)

        # JetBrains info panel
        jetbrains_frame = ttk.LabelFrame(info_frame, text="JetBrains IDEs", padding=10)
        jetbrains_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

        ttk.Label(jetbrains_frame, text="üîß Tr·∫°ng th√°i:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Label(jetbrains_frame, textvariable=self.jetbrains_status).grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=2)

        # VSCode info panel
        vscode_frame = ttk.LabelFrame(info_frame, text="VSCode-based IDEs", padding=10)
        vscode_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))

        ttk.Label(vscode_frame, text="üíª VSCode IDEs:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Label(vscode_frame, textvariable=self.vscode_status).grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=2)

        ttk.Label(vscode_frame, text="üöÄ Tool Status:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Label(vscode_frame, textvariable=self.augment_status).grid(row=1, column=1, sticky=tk.W, padx=(10, 0), pady=2)

    def create_cursor_function_buttons(self):
        """T·∫°o c√°c n√∫t ch·ª©c nƒÉng cho tab Cursor"""
        button_frame = ttk.Frame(self.cursor_frame)
        button_frame.pack(fill=tk.X, padx=10, pady=10)

        # Row 1
        row1_frame = ttk.Frame(button_frame)
        row1_frame.pack(fill=tk.X, pady=(0, 5))

        btn1 = ttk.Button(row1_frame, text="Reset Machine ID",
                         command=self.reset_machine_id, width=25)
        btn1.pack(side=tk.LEFT, padx=(0, 5))

        btn2 = ttk.Button(row1_frame, text="T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t Cursor",
                         command=self.disable_auto_update, width=25)
        btn2.pack(side=tk.LEFT, padx=5)

        btn3 = ttk.Button(row1_frame, text="Reset Full Cursor",
                         command=self.reset_full_cursor, width=25)
        btn3.pack(side=tk.LEFT, padx=(5, 0))

        # Row 2
        row2_frame = ttk.Frame(button_frame)
        row2_frame.pack(fill=tk.X)

        btn4 = ttk.Button(row2_frame, text="B·ªè qua ki·ªÉm tra phi√™n b·∫£n",
                         command=self.bypass_version_check, width=25)
        btn4.pack(side=tk.LEFT, padx=(0, 5))

        btn5 = ttk.Button(row2_frame, text="Hi·ªÉn th·ªã c·∫•u h√¨nh",
                         command=self.show_config, width=25)
        btn5.pack(side=tk.LEFT, padx=5)

        btn6 = ttk.Button(row2_frame, text="B·ªè qua gi·ªõi h·∫°n token",
                         command=self.bypass_token_limit, width=25)
        btn6.pack(side=tk.LEFT, padx=(5, 0))

    def create_augment_function_buttons(self):
        """T·∫°o c√°c n√∫t ch·ª©c nƒÉng cho tab Augment VIP"""
        button_frame = ttk.Frame(self.augment_frame)
        button_frame.pack(fill=tk.X, padx=10, pady=10)

        # Row 1
        row1_frame = ttk.Frame(button_frame)
        row1_frame.pack(fill=tk.X, pady=(0, 5))

        btn1 = ttk.Button(row1_frame, text="Reset JetBrains IDs",
                         command=self.reset_jetbrains_ids, width=25)
        btn1.pack(side=tk.LEFT, padx=(0, 5))

        # IDE Selection Frame
        ide_frame = ttk.Frame(row1_frame)
        ide_frame.pack(side=tk.LEFT, padx=5)

        ttk.Label(ide_frame, text="Ch·ªçn IDE:").pack(side=tk.LEFT)
        self.selected_ide = tk.StringVar(value="cursor")
        ide_combo = ttk.Combobox(ide_frame, textvariable=self.selected_ide,
                                values=["cursor", "windsurf", "vscode", "vscodium", "all"],
                                state="readonly", width=12)
        ide_combo.pack(side=tk.LEFT, padx=(5, 0))

        btn2 = ttk.Button(row1_frame, text="Reset IDE IDs",
                         command=self.reset_selected_ide_ids, width=20)
        btn2.pack(side=tk.LEFT, padx=5)

        btn3 = ttk.Button(row1_frame, text="Clean Augment DB",
                         command=self.clean_vscode_database, width=20)
        btn3.pack(side=tk.LEFT, padx=(5, 0))

        # Row 2
        row2_frame = ttk.Frame(button_frame)
        row2_frame.pack(fill=tk.X)

        btn4 = ttk.Button(row2_frame, text="Clean Telemetry",
                         command=self.clean_telemetry_entries, width=25)
        btn4.pack(side=tk.LEFT, padx=(0, 5))

        btn5 = ttk.Button(row2_frame, text="Reset All IDs",
                         command=self.reset_all_ids_with_terminate, width=25)
        btn5.pack(side=tk.LEFT, padx=5)

        btn6 = ttk.Button(row2_frame, text="Check IDE Status",
                         command=self.check_ide_status, width=25)
        btn6.pack(side=tk.LEFT, padx=(5, 0))

    def create_cursor_log_area(self):
        """T·∫°o v√πng log cho tab Cursor"""
        log_frame = ttk.LabelFrame(self.cursor_frame, text="Cursor Log", padding=5)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))

        self.cursor_log_text = scrolledtext.ScrolledText(log_frame, height=12,
                                                        font=("Consolas", 9),
                                                        bg="#000000", fg="#FFFFFF",
                                                        insertbackground="#FFFFFF",
                                                        selectbackground="#333333",
                                                        selectforeground="#FFFFFF")
        self.cursor_log_text.pack(fill=tk.BOTH, expand=True)

        # Th√™m log m·∫∑c ƒë·ªãnh
        self.cursor_log("‚úÖ File storage.json h·ª£p l·ªá v√† c√≥ d·ªØ li·ªáu.")
        self.cursor_log("")
        self.cursor_log("üìÅ File SQLite:")
        self.cursor_log("ƒê∆∞·ªùng d·∫´n: C:\\Users\\letan\\AppData\\Roaming\\Cursor\\User\\globalStorage\\state.vscdb")
        self.cursor_log("K√≠ch th∆∞·ªõc: 96309248 bytes")
        self.cursor_log("Quy·ªÅn truy c·∫≠p: 0o666")
        self.cursor_log("Quy·ªÅn ƒë·ªçc/ghi: C√≥")
        self.cursor_log("‚úÖ K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu SQLite th√†nh c√¥ng.")
        self.cursor_log("S·ªë b·∫£ng: 2")
        self.cursor_log("=" * 50)

    def create_augment_log_area(self):
        """T·∫°o v√πng log cho tab Augment VIP"""
        log_frame = ttk.LabelFrame(self.augment_frame, text="Augment VIP Log", padding=5)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))

        self.augment_log_text = scrolledtext.ScrolledText(log_frame, height=12,
                                                         font=("Consolas", 9),
                                                         bg="#000000", fg="#FFFFFF",
                                                         insertbackground="#FFFFFF",
                                                         selectbackground="#333333",
                                                         selectforeground="#FFFFFF")
        self.augment_log_text.pack(fill=tk.BOTH, expand=True)

        # Th√™m log m·∫∑c ƒë·ªãnh
        self.augment_log("üîß Augment VIP - IDE Telemetry Reset Tool")
        self.augment_log("üìã H·ªó tr·ª£: JetBrains IDEs + VSCode-based IDEs")
        self.augment_log("üí° Ch·ªçn IDE c·ª• th·ªÉ: Cursor, Windsurf, VSCode, VSCodium")
        self.augment_log("üöÄ T√çNH NƒÇNG M·ªöI: Reset IDs t·ª± ƒë·ªông terminate IDE tr∆∞·ªõc!")
        self.augment_log("üîç ƒêang ki·ªÉm tra IDE installations...")
        self.augment_log("=" * 50)

    def cursor_log(self, message):
        """Th√™m message v√†o cursor log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.cursor_log_text.insert(tk.END, log_entry)
        self.cursor_log_text.see(tk.END)

    def augment_log(self, message):
        """Th√™m message v√†o augment log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        self.augment_log_text.insert(tk.END, log_entry)
        self.augment_log_text.see(tk.END)

    def log(self, message):
        """Th√™m message v√†o cursor log (backward compatibility)"""
        self.cursor_log(message)
        
    def load_account_info(self):
        """T·∫£i th√¥ng tin t√†i kho·∫£n trong background - S·ª¨ D·ª§NG LOGIC M·ªöI"""
        def load_info():
            try:
                self.log("üîÑ ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n...")

                # Get token using new logic
                token = get_token()
                if not token:
                    self.log("‚ùå Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p Cursor.")
                    self.account_email.set("Ch∆∞a ƒëƒÉng nh·∫≠p")
                    self.account_type.set("Free")
                    self.account_days.set("0 ng√†y")
                    self.usage_fast.set("N/A")
                    self.usage_slow.set("N/A")
                    return

                self.log(f"‚úÖ ƒê√£ t√¨m th·∫•y token: {token[:20]}...")

                # Get email using new logic
                email = get_email()
                if email:
                    self.account_email.set(email)
                    self.log(f"‚úÖ Email: {email}")
                else:
                    self.account_email.set("Kh√¥ng t√¨m th·∫•y")
                    self.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y email")

                # Get subscription info using new logic
                try:
                    subscription_info = UsageManager.get_stripe_profile(token)
                    if subscription_info:
                        subscription_type = format_subscription_type(subscription_info)
                        self.account_type.set(subscription_type)

                        # Get remaining days
                        days_remaining = subscription_info.get("daysRemainingOnTrial", 0)
                        self.account_days.set(f"{days_remaining} ng√†y")

                        self.log(f"‚úÖ Subscription: {subscription_type}")
                        self.log(f"‚úÖ Days remaining: {days_remaining}")
                    else:
                        self.account_type.set("Free")
                        self.account_days.set("0 ng√†y")
                        self.log("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin subscription")
                except Exception as e:
                    self.log(f"‚ùå L·ªói l·∫•y subscription: {str(e)}")
                    self.account_type.set("Free")
                    self.account_days.set("0 ng√†y")

                # Get usage info using new logic
                try:
                    usage_info = UsageManager.get_usage(token)
                    if usage_info:
                        # Format usage display
                        premium_usage = usage_info.get('premium_usage', 0)
                        max_premium_usage = usage_info.get('max_premium_usage', "No Limit")
                        basic_usage = usage_info.get('basic_usage', 0)
                        max_basic_usage = usage_info.get('max_basic_usage', "No Limit")

                        self.usage_fast.set(f"{premium_usage}/{max_premium_usage}")
                        self.usage_slow.set(f"{basic_usage}/{max_basic_usage}")

                        self.log(f"‚úÖ Fast Response: {premium_usage}/{max_premium_usage}")
                        self.log(f"‚úÖ Slow Response: {basic_usage}/{max_basic_usage}")
                    else:
                        self.usage_fast.set("N/A")
                        self.usage_slow.set("N/A")
                        self.log("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin usage")
                except Exception as e:
                    self.log(f"‚ùå L·ªói l·∫•y usage: {str(e)}")
                    self.usage_fast.set("N/A")
                    self.usage_slow.set("N/A")

                self.log("‚úÖ Ho√†n th√†nh t·∫£i th√¥ng tin t√†i kho·∫£n")

            except Exception as e:
                self.log(f"‚ùå L·ªói t·ªïng qu√°t: {str(e)}")
                import traceback
                self.log(f"Chi ti·∫øt: {traceback.format_exc()}")

        thread = threading.Thread(target=load_info, daemon=True)
        thread.start()
        
    # C√°c ph∆∞∆°ng th·ª©c ch·ª©c nƒÉng
    def reset_machine_id(self):
        """Reset Machine ID"""
        self.log("üîÑ ƒêang reset Machine ID...")
        try:
            from features.reset_machine_id import reset_machine_id
            result, message = reset_machine_id()
            if result:
                self.log("‚úÖ Reset Machine ID th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset Machine ID th√†nh c√¥ng!")
            else:
                self.log("‚ùå Reset Machine ID th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "Reset Machine ID th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    def disable_auto_update(self):
        """T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t Cursor"""
        self.log("üîÑ ƒêang t·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t...")
        try:
            from features.disable_auto_update import disable_auto_update
            result, message = disable_auto_update()
            if result:
                self.log("‚úÖ T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t th√†nh c√¥ng!")
            else:
                self.log("‚ùå T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def reset_full_cursor(self):
        """Reset Full Cursor"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi reset
        confirm = messagebox.askyesno("X√°c nh·∫≠n", 
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu Cursor!\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.log("‚ùå ƒê√£ h·ªßy thao t√°c reset to√†n b·ªô")
            return
            
        self.log("üîÑ ƒêang reset to√†n b·ªô Cursor...")
        try:
            from features.reset_full_cursor import reset_full_cursor
            result, message = reset_full_cursor()
            if result:
                self.log("‚úÖ Reset to√†n b·ªô Cursor th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset to√†n b·ªô Cursor th√†nh c√¥ng!")
            else:
                self.log("‚ùå Reset to√†n b·ªô Cursor th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "Reset to√†n b·ªô Cursor th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    def bypass_version_check(self):
        """B·ªè qua ki·ªÉm tra phi√™n b·∫£n"""
        self.log("üîÑ ƒêang b·ªè qua ki·ªÉm tra phi√™n b·∫£n...")
        try:
            from features.bypass_version_check import bypass_version_check
            result, message = bypass_version_check()
            if result:
                self.log("‚úÖ B·ªè qua ki·ªÉm tra phi√™n b·∫£n th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "B·ªè qua ki·ªÉm tra phi√™n b·∫£n th√†nh c√¥ng!")
            else:
                self.log("‚ùå B·ªè qua ki·ªÉm tra phi√™n b·∫£n th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "B·ªè qua ki·ªÉm tra phi√™n b·∫£n th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    def show_config(self):
        """Hi·ªÉn th·ªã c·∫•u h√¨nh - S·ª¨ D·ª§NG LOGIC M·ªöI"""
        self.log("üìã ƒêang hi·ªÉn th·ªã c·∫•u h√¨nh...")
        try:
            from features.show_config import show_account_info
            result, message = show_account_info()
            if result:
                self.log("‚úÖ Hi·ªÉn th·ªã c·∫•u h√¨nh th√†nh c√¥ng!")
                # Hi·ªÉn th·ªã trong c·ª≠a s·ªï m·ªõi
                config_window = tk.Toplevel(self.root)
                config_window.title("Th√¥ng tin t√†i kho·∫£n Cursor")
                config_window.geometry("800x600")
                config_window.resizable(True, True)

                # Text widget ƒë·ªÉ hi·ªÉn th·ªã config
                config_text = scrolledtext.ScrolledText(config_window,
                                                       font=("Consolas", 10),
                                                       bg="#000080", fg="#FFFFFF")
                config_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
                config_text.insert(tk.END, message)
                config_text.config(state=tk.DISABLED)
            else:
                self.log("‚ùå Hi·ªÉn th·ªã c·∫•u h√¨nh th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", message)
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            import traceback
            self.log(f"Chi ti·∫øt: {traceback.format_exc()}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    def bypass_token_limit(self):
        """B·ªè qua gi·ªõi h·∫°n token"""
        self.log("üîÑ ƒêang b·ªè qua gi·ªõi h·∫°n token...")
        try:
            from features.bypass_token_limit import bypass_token_limit
            result, message = bypass_token_limit()
            if result:
                self.log("‚úÖ B·ªè qua gi·ªõi h·∫°n token th√†nh c√¥ng!")
                self.log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "B·ªè qua gi·ªõi h·∫°n token th√†nh c√¥ng!")
            else:
                self.log("‚ùå B·ªè qua gi·ªõi h·∫°n token th·∫•t b·∫°i!")
                self.log(message)
                messagebox.showerror("L·ªói", "B·ªè qua gi·ªõi h·∫°n token th·∫•t b·∫°i!")
        except Exception as e:
            self.log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")
            
    # C√°c ph∆∞∆°ng th·ª©c cho Augment Code
    def check_ide_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i IDE installations"""
        def check_status():
            try:
                self.augment_log("üîç ƒêang ki·ªÉm tra JetBrains installations...")

                # Check JetBrains
                try:
                    from features import check_jetbrains_installation
                    jetbrains_found = check_jetbrains_installation()
                    if jetbrains_found:
                        self.jetbrains_status.set("‚úÖ ƒê√£ c√†i ƒë·∫∑t")
                        self.augment_log("‚úÖ T√¨m th·∫•y JetBrains IDEs")
                    else:
                        self.jetbrains_status.set("‚ùå Ch∆∞a c√†i ƒë·∫∑t")
                        self.augment_log("‚ùå Kh√¥ng t√¨m th·∫•y JetBrains IDEs")
                except (ImportError, AttributeError):
                    self.jetbrains_status.set("‚ùå Module l·ªói")
                    self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")

                # Check t·ª´ng IDE c·ª• th·ªÉ
                try:
                    from features.augment_utils import get_installed_ides
                    installed_ides = get_installed_ides()

                    self.augment_log("üìã Chi ti·∫øt IDE installations:")

                    ide_count = 0
                    for ide_key, ide_info in installed_ides.items():
                        if ide_key != "jetbrains":  # JetBrains ƒë√£ check ·ªü tr√™n
                            status = "‚úÖ" if ide_info["installed"] else "‚ùå"
                            self.augment_log(f"   {status} {ide_info['name']}")
                            if ide_info["installed"]:
                                ide_count += 1

                    if ide_count > 0:
                        self.vscode_status.set(f"‚úÖ {ide_count} IDE(s)")
                        self.augment_status.set("‚úÖ S·∫µn s√†ng")
                        self.augment_log(f"‚úÖ T√¨m th·∫•y {ide_count} VSCode-based IDEs")
                    else:
                        self.vscode_status.set("‚ùå Ch∆∞a c√†i ƒë·∫∑t")
                        self.augment_status.set("‚ùå Kh√¥ng kh·∫£ d·ª•ng")
                        self.augment_log("‚ùå Kh√¥ng t√¨m th·∫•y VSCode-based IDEs")

                except (ImportError, AttributeError):
                    self.vscode_status.set("‚ùå Module l·ªói")
                    self.augment_status.set("‚ùå Module l·ªói")
                    self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")

                self.augment_log("‚úÖ Ho√†n th√†nh ki·ªÉm tra IDE status")

            except Exception as e:
                self.augment_log(f"‚ùå L·ªói ki·ªÉm tra IDE status: {str(e)}")
                self.jetbrains_status.set("‚ùå L·ªói")
                self.vscode_status.set("‚ùå L·ªói")
                self.augment_status.set("‚ùå L·ªói")

        thread = threading.Thread(target=check_status, daemon=True)
        thread.start()

    def reset_jetbrains_ids(self):
        """Reset JetBrains IDs"""
        self.augment_log("üîÑ ƒêang reset JetBrains IDs...")
        try:
            from features import reset_jetbrains_ids
            result, message = reset_jetbrains_ids()
            if result:
                self.augment_log("‚úÖ Reset JetBrains IDs th√†nh c√¥ng!")
                self.augment_log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset JetBrains IDs th√†nh c√¥ng!")
            else:
                self.augment_log("‚ùå Reset JetBrains IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Reset JetBrains IDs th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def reset_selected_ide_ids(self):
        """Reset IDs c·ªßa IDE ƒë∆∞·ª£c ch·ªçn (t√≠ch h·ª£p terminate)"""
        selected = self.selected_ide.get()

        if selected == "all":
            self.reset_all_ids_with_terminate()
            return

        ide_names = {
            "cursor": "Cursor",
            "windsurf": "Windsurf",
            "vscode": "Visual Studio Code",
            "vscodium": "VSCodium"
        }

        ide_name = ide_names.get(selected, selected.upper())

        # X√°c nh·∫≠n tr∆∞·ªõc khi th·ª±c hi·ªán
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     f"üîÑ RESET {ide_name.upper()} IDs\n\n"
                                     f"Qu√° tr√¨nh s·∫Ω:\n"
                                     f"1. üõë Terminate {ide_name} processes\n"
                                     f"2. üîÑ Reset {ide_name} telemetry IDs\n"
                                     f"3. üîí Lock files\n\n"
                                     f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log(f"‚ùå ƒê√£ h·ªßy reset {ide_name} IDs")
            return

        self.augment_log(f"üöÄ B·∫Øt ƒë·∫ßu reset {ide_name} IDs (c√≥ terminate)...")

        try:
            # B∆∞·ªõc 1: Terminate IDE tr∆∞·ªõc
            self.augment_log(f"üõë B∆∞·ªõc 1: Terminate {ide_name} processes...")
            terminate_success = self.terminate_specific_ide(selected)

            if terminate_success:
                self.augment_log(f"‚úÖ Terminate {ide_name} th√†nh c√¥ng!")
            else:
                self.augment_log(f"‚ö†Ô∏è Terminate {ide_name} c√≥ v·∫•n ƒë·ªÅ, nh∆∞ng ti·∫øp t·ª•c reset...")

            # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o processes ƒë√£ ƒë√≥ng
            self.augment_log("‚è≥ ƒê·ª£i 2 gi√¢y ƒë·ªÉ processes ƒë√≥ng ho√†n to√†n...")
            import time
            time.sleep(2)

            # B∆∞·ªõc 2: Reset IDs
            self.augment_log(f"üîÑ B∆∞·ªõc 2: Reset {ide_name} IDs...")
            from features.augment_reset_ids import reset_vscode_ids
            result, message = reset_vscode_ids(specific_ide=selected)

            if result:
                self.augment_log(f"‚úÖ Reset {ide_name} IDs th√†nh c√¥ng!")
                self.augment_log(message)
                self.augment_log(f"üéâ Ho√†n th√†nh reset {ide_name}! B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i {ide_name}.")
                messagebox.showinfo("Th√†nh c√¥ng",
                                   f"‚úÖ Reset {ide_name} ho√†n th√†nh!\n\n"
                                   f"‚úì ƒê√£ terminate processes\n"
                                   f"‚úì ƒê√£ reset telemetry IDs\n"
                                   f"‚úì ƒê√£ lock files\n\n"
                                   f"B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i {ide_name}.")
            else:
                self.augment_log(f"‚ùå Reset {ide_name} IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", f"Reset {ide_name} IDs th·∫•t b·∫°i!")

        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def terminate_specific_ide(self, ide_type):
        """Terminate IDE c·ª• th·ªÉ"""
        try:
            import psutil

            # Mapping IDE types to process patterns
            ide_patterns = {
                "cursor": ["cursor"],
                "windsurf": ["windsurf"],
                "vscode": ["code", "vscode"],
                "vscodium": ["vscodium"]
            }

            patterns = ide_patterns.get(ide_type, [ide_type])
            terminated_count = 0

            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    proc_name = proc.info['name'].lower()
                    cmdline = ' '.join(proc.info['cmdline']).lower() if proc.info['cmdline'] else ""

                    # Ki·ªÉm tra xem c√≥ ph·∫£i IDE c·∫ßn terminate kh√¥ng
                    should_terminate = False
                    for pattern in patterns:
                        if pattern in proc_name or pattern in cmdline:
                            should_terminate = True
                            break

                    if should_terminate:
                        try:
                            proc.terminate()
                            proc.wait(timeout=3)
                            self.augment_log(f"   ‚úÖ Terminated: {proc.info['name']} (PID: {proc.info['pid']})")
                            terminated_count += 1
                        except psutil.TimeoutExpired:
                            proc.kill()
                            self.augment_log(f"   üî• Force killed: {proc.info['name']} (PID: {proc.info['pid']})")
                            terminated_count += 1
                        except psutil.NoSuchProcess:
                            pass
                        except Exception as e:
                            self.augment_log(f"   ‚ùå Error terminating {proc.info['name']}: {str(e)}")

                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    continue
                except Exception:
                    continue

            if terminated_count > 0:
                self.augment_log(f"   üìä ƒê√£ terminate {terminated_count} processes")
                return True
            else:
                self.augment_log(f"   ‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y processes n√†o ƒëang ch·∫°y")
                return True  # Kh√¥ng c√≥ process n√†o c≈©ng l√† th√†nh c√¥ng

        except Exception as e:
            self.augment_log(f"   ‚ùå L·ªói terminate: {str(e)}")
            return False

    def reset_all_ids_with_terminate(self):
        """Reset t·∫•t c·∫£ IDs v·ªõi terminate t√≠ch h·ª£p"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi reset all
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     "üîÑ RESET T·∫§T C·∫¢ IDs\n\n"
                                     "Qu√° tr√¨nh s·∫Ω:\n"
                                     "1. üõë Terminate T·∫§T C·∫¢ VSCode-based IDEs\n"
                                     "2. üîß Reset JetBrains IDs\n"
                                     "3. üíª Reset t·∫•t c·∫£ VSCode variant IDs\n"
                                     "4. üîí Lock t·∫•t c·∫£ files\n\n"
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: T·∫•t c·∫£ IDEs s·∫Ω b·ªã ƒë√≥ng!\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log("‚ùå ƒê√£ h·ªßy thao t√°c reset t·∫•t c·∫£ IDs")
            return

        self.augment_log("üöÄ B·∫Øt ƒë·∫ßu reset T·∫§T C·∫¢ IDs (c√≥ terminate)...")

        try:
            # B∆∞·ªõc 1: Terminate t·∫•t c·∫£ IDEs
            self.augment_log("üõë B∆∞·ªõc 1: Terminate t·∫•t c·∫£ VSCode-based IDEs...")
            from features import terminate_ides
            _, terminate_message = terminate_ides()
            self.augment_log(terminate_message)

            # ƒê·ª£i processes ƒë√≥ng
            self.augment_log("‚è≥ ƒê·ª£i 3 gi√¢y ƒë·ªÉ t·∫•t c·∫£ processes ƒë√≥ng...")
            import time
            time.sleep(3)

            # B∆∞·ªõc 2: Reset t·∫•t c·∫£ IDs
            self.augment_log("üîÑ B∆∞·ªõc 2: Reset t·∫•t c·∫£ IDs...")
            from features import reset_all_ids
            result, message = reset_all_ids()

            if result:
                self.augment_log("‚úÖ Reset t·∫•t c·∫£ IDs th√†nh c√¥ng!")
                self.augment_log(message)
                self.augment_log("üéâ Ho√†n th√†nh reset t·∫•t c·∫£! B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i c√°c IDEs.")
                messagebox.showinfo("Th√†nh c√¥ng",
                                   "‚úÖ Reset t·∫•t c·∫£ IDs ho√†n th√†nh!\n\n"
                                   "‚úì ƒê√£ terminate t·∫•t c·∫£ IDEs\n"
                                   "‚úì ƒê√£ reset JetBrains IDs\n"
                                   "‚úì ƒê√£ reset VSCode variant IDs\n"
                                   "‚úì ƒê√£ lock t·∫•t c·∫£ files\n\n"
                                   "B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông l·∫°i c√°c IDEs.")
            else:
                self.augment_log("‚ùå Reset t·∫•t c·∫£ IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Reset t·∫•t c·∫£ IDs th·∫•t b·∫°i!")

        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def reset_vscode_ids(self):
        """Reset t·∫•t c·∫£ VSCode IDs (backward compatibility)"""
        self.augment_log("üîÑ ƒêang reset t·∫•t c·∫£ VSCode IDs...")
        try:
            from features.augment_reset_ids import reset_vscode_ids
            result, message = reset_vscode_ids()
            if result:
                self.augment_log("‚úÖ Reset VSCode IDs th√†nh c√¥ng!")
                self.augment_log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset VSCode IDs th√†nh c√¥ng!")
            else:
                self.augment_log("‚ùå Reset VSCode IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Reset VSCode IDs th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def clean_vscode_database(self):
        """Clean VSCode Database (ch·ªâ entries ch·ª©a 'augment')"""
        self.augment_log("üîÑ ƒêang clean VSCode database (Augment entries)...")
        try:
            from features.augment_clean_database import clean_vscode_database
            result, message = clean_vscode_database()
            self.augment_log("üìã Clean Augment Database ho√†n th√†nh!")
            self.augment_log(message)
            if result:
                messagebox.showinfo("Ho√†n th√†nh", "Clean Augment Database ho√†n th√†nh!\n\nXem chi ti·∫øt trong log.")
            else:
                messagebox.showerror("L·ªói", "Clean Augment Database th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def clean_telemetry_entries(self):
        """Clean t·∫•t c·∫£ telemetry entries"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi clean
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a T·∫§T C·∫¢ entries telemetry!\n"
                                     "Bao g·ªìm: telemetry, machine, device, uuid\n\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log("‚ùå ƒê√£ h·ªßy thao t√°c clean telemetry")
            return

        self.augment_log("üîÑ ƒêang clean t·∫•t c·∫£ telemetry entries...")
        try:
            from features.augment_clean_database import clean_telemetry_entries
            result, message = clean_telemetry_entries()
            self.augment_log("üìã Clean Telemetry ho√†n th√†nh!")
            self.augment_log(message)
            if result:
                messagebox.showinfo("Ho√†n th√†nh", "Clean Telemetry ho√†n th√†nh!\n\nXem chi ti·∫øt trong log.")
            else:
                messagebox.showerror("L·ªói", "Clean Telemetry th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def terminate_ides(self):
        """Terminate IDEs"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi terminate
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω ƒë√≥ng t·∫•t c·∫£ IDE ƒëang ch·∫°y!\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log("‚ùå ƒê√£ h·ªßy thao t√°c terminate IDEs")
            return

        self.augment_log("üîÑ ƒêang terminate IDEs...")
        try:
            from features import terminate_ides
            result, message = terminate_ides()
            if result:
                self.augment_log("‚úÖ Terminate IDEs th√†nh c√¥ng!")
                self.augment_log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Terminate IDEs th√†nh c√¥ng!")
            else:
                self.augment_log("‚ùå Terminate IDEs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Terminate IDEs th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def reset_all_ids(self):
        """Reset t·∫•t c·∫£ IDs"""
        # X√°c nh·∫≠n tr∆∞·ªõc khi reset all
        confirm = messagebox.askyesno("X√°c nh·∫≠n",
                                     "‚ö†Ô∏è C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω reset t·∫•t c·∫£ IDs c·ªßa JetBrains v√† VSCode!\n"
                                     "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?")
        if not confirm:
            self.augment_log("‚ùå ƒê√£ h·ªßy thao t√°c reset t·∫•t c·∫£ IDs")
            return

        self.augment_log("üîÑ ƒêang reset t·∫•t c·∫£ IDs...")
        try:
            from features import reset_all_ids
            result, message = reset_all_ids()
            if result:
                self.augment_log("‚úÖ Reset t·∫•t c·∫£ IDs th√†nh c√¥ng!")
                self.augment_log(message)
                messagebox.showinfo("Th√†nh c√¥ng", "Reset t·∫•t c·∫£ IDs th√†nh c√¥ng!")
            else:
                self.augment_log("‚ùå Reset t·∫•t c·∫£ IDs th·∫•t b·∫°i!")
                self.augment_log(message)
                messagebox.showerror("L·ªói", "Reset t·∫•t c·∫£ IDs th·∫•t b·∫°i!")
        except (ImportError, AttributeError):
            self.augment_log("‚ùå Augment modules ch∆∞a s·∫µn s√†ng")
            messagebox.showerror("L·ªói", "Augment Code modules ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß")
        except Exception as e:
            self.augment_log(f"‚ùå L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"L·ªói: {str(e)}")

    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()
