#!/usr/bin/env python3
# run.py - Script ch·∫°y Lappy Lab 4.1
import sys
import os
import ctypes
import platform

def is_admin():
    """Ki·ªÉm tra xem c√≥ quy·ªÅn admin kh√¥ng (ch·ªâ tr√™n Windows)"""
    if platform.system() != "Windows":
        return True  # Tr√™n Linux/Mac kh√¥ng c·∫ßn ki·ªÉm tra
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def run_as_admin():
    """Ch·∫°y l·∫°i script v·ªõi quy·ªÅn admin (ch·ªâ tr√™n Windows)"""
    if platform.system() != "Windows":
        return True  # Tr√™n Linux/Mac kh√¥ng c·∫ßn admin

    if is_admin():
        return True
    else:
        try:
            # L·∫•y ƒë∆∞·ªùng d·∫´n Python v√† script hi·ªán t·∫°i
            python_exe = sys.executable
            script_path = os.path.abspath(__file__)

            print("‚ö†Ô∏è  C·∫ßn quy·ªÅn Administrator ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng")
            print("üîÑ ƒêang y√™u c·∫ßu quy·ªÅn Administrator...")

            # Ch·∫°y l·∫°i v·ªõi quy·ªÅn admin (0 = ·∫©n c·ª≠a s·ªï)
            ctypes.windll.shell32.ShellExecuteW(
                None,
                "runas",
                python_exe,
                f'"{script_path}"',
                None,
                0
            )
            return False
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ ch·∫°y v·ªõi quy·ªÅn admin: {e}")
            print("‚ö†Ô∏è  Ti·∫øp t·ª•c ch·∫°y v·ªõi quy·ªÅn th∆∞·ªùng...")
            return True  # Ti·∫øp t·ª•c ch·∫°y b√¨nh th∆∞·ªùng

def check_python_version():
    """Ki·ªÉm tra phi√™n b·∫£n Python"""
    if sys.version_info < (3, 8):
        print("‚ùå L·ªói: C·∫ßn Python 3.8 tr·ªü l√™n")
        print(f"Phi√™n b·∫£n hi·ªán t·∫°i: {sys.version}")
        return False
    return True

def check_dependencies():
    """Ki·ªÉm tra dependencies"""
    required_modules = [
        'tkinter',
        'colorama', 
        'requests',
        'psutil'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print("‚ùå Thi·∫øu c√°c module sau:")
        for module in missing_modules:
            print(f"  - {module}")
        print("\nC√†i ƒë·∫∑t b·∫±ng l·ªánh:")
        print("pip install -r requirements.txt")
        return False
    
    return True

def main():
    """H√†m main"""
    print("üöÄ ƒêang kh·ªüi ƒë·ªông Lappy Lab 4.1...")

    # Ki·ªÉm tra v√† y√™u c·∫ßu quy·ªÅn admin n·∫øu c·∫ßn (ch·ªâ tr√™n Windows)
    if not run_as_admin():
        print("ƒêang kh·ªüi ƒë·ªông l·∫°i v·ªõi quy·ªÅn Administrator...")
        sys.exit(0)

    if platform.system() == "Windows" and is_admin():
        print("‚úÖ ƒêang ch·∫°y v·ªõi quy·ªÅn Administrator")

    # Ki·ªÉm tra Python version
    if not check_python_version():
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    # Ki·ªÉm tra dependencies
    if not check_dependencies():
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    # Import v√† ch·∫°y app
    try:
        from main import main as run_app
        print("‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng t·∫•t c·∫£ dependencies")
        print("üéØ ƒêang kh·ªüi ƒë·ªông giao di·ªán...")
        run_app()
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {str(e)}")
        print("\nChi ti·∫øt l·ªói:")
        import traceback
        traceback.print_exc()
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    main()
