import os
import sys
import json
import sqlite3
import requests
import platform
from colorama import Fore, Style, init
from utils import get_cursor_paths
from config import EMOJI, get_config

# Kh·ªüi t·∫°o colorama
init()

# Emoji cho th√¥ng tin t√†i kho·∫£n
ACCOUNT_EMOJI = {
    "USER": "üë§",
    "EMAIL": "üìß",
    "PLAN": "üî∞",
    "TIME": "‚è±Ô∏è",
    "USAGE": "üìä",
    "PREMIUM": "‚≠ê",
    "BASIC": "üîÑ",
    "WARNING": "‚ö†Ô∏è",
    "INFO": "‚ÑπÔ∏è",
    "ERROR": "‚ùå",
    "SUCCESS": "‚úÖ"
}

# M√†u s·∫Øc Windows 95/XP (sao ch√©p t·ª´ gui.py)
RETRO_COLORS = {
    "win95_bg": "#D4D0C8",           # X√°m c∆° b·∫£n c·ªßa Win95 (ƒë√£ c·∫≠p nh·∫≠t)
    "win95_btn": "#D4D0C8",          # N√∫t Win95 (ƒë√£ c·∫≠p nh·∫≠t)
    "win95_btn_shadow": "#808080",   # B√≥ng n√∫t Win95
    "win95_btn_highlight": "#ffffff", # Vi·ªÅn s√°ng Win95
    "win95_titlebar": "#000080",     # Thanh ti√™u ƒë·ªÅ xanh ƒë·∫≠m Win95
    "win95_titlebar_text": "#ffffff", # Ch·ªØ thanh ti√™u ƒë·ªÅ Win95
    "win95_menu": "#D4D0C8",         # Menu Win95 (ƒë√£ c·∫≠p nh·∫≠t)
    "win95_text": "#000000",         # Ch·ªØ Win95
    
    "xp_blue": "#245EDC",            # Xanh d∆∞∆°ng Windows XP
    "xp_green": "#36A546",           # Xanh l√° Windows XP
    "xp_gradient_start": "#2A60DF",  # B·∫Øt ƒë·∫ßu gradient thanh ti√™u ƒë·ªÅ XP
    "xp_gradient_end": "#0F3BBF",    # K·∫øt th√∫c gradient thanh ti√™u ƒë·ªÅ XP
    "xp_btn": "#ECE9D8",             # N√∫t XP
    "xp_btn_hover": "#B6CAE4",       # N√∫t XP khi hover
    "xp_menu": "#F1F1F1",            # Menu XP
    "xp_text": "#000000",            # Ch·ªØ XP
    "xp_text_light": "#FFFFFF",      # Ch·ªØ s√°ng XP
    "xp_window_frame": "#0054E3"     # Vi·ªÅn c·ª≠a s·ªï XP
}

class Config:
    """C·∫•u h√¨nh"""
    NAME_LOWER = "cursor"
    NAME_CAPITALIZE = "Cursor"
    BASE_HEADERS = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Accept": "application/json",
        "Content-Type": "application/json"
    }

class UsageManager:
    """Qu·∫£n l√Ω th√¥ng tin s·ª≠ d·ª•ng"""

    @staticmethod
    def get_proxy():
        """L·∫•y proxy"""
        proxy = os.environ.get("HTTP_PROXY") or os.environ.get("HTTPS_PROXY")
        if proxy:
            return {"http": proxy, "https": proxy}
        return None

    @staticmethod
    def get_usage(token):
        """L·∫•y th√¥ng tin s·ª≠ d·ª•ng"""
        url = f"https://www.{Config.NAME_LOWER}.com/api/usage"
        headers = Config.BASE_HEADERS.copy()
        headers.update({"Cookie": f"Workos{Config.NAME_CAPITALIZE}SessionToken=user_01OOOOOOOOOOOOOOOOOOOOOOOO%3A%3A{token}"})
        try:
            proxies = UsageManager.get_proxy()
            response = requests.get(url, headers=headers, timeout=10, proxies=proxies)
            response.raise_for_status()
            data = response.json()

            # L·∫•y th√¥ng tin s·ª≠ d·ª•ng Premium v√† gi·ªõi h·∫°n
            gpt4_data = data.get("gpt-4", {})
            premium_usage = gpt4_data.get("numRequestsTotal", 0)
            max_premium_usage = gpt4_data.get("maxRequestUsage", 999)

            # L·∫•y th√¥ng tin s·ª≠ d·ª•ng Basic, nh∆∞ng ƒë·∫∑t gi·ªõi h·∫°n l√† "Kh√¥ng gi·ªõi h·∫°n"
            gpt35_data = data.get("gpt-3.5-turbo", {})
            basic_usage = gpt35_data.get("numRequestsTotal", 0)

            return {
                'premium_usage': premium_usage,
                'max_premium_usage': max_premium_usage,
                'basic_usage': basic_usage,
                'max_basic_usage': "Kh√¥ng gi·ªõi h·∫°n"
            }
        except Exception:
            return None

    @staticmethod
    def get_stripe_profile(token):
        """L·∫•y th√¥ng tin ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng"""
        url = f"https://api2.{Config.NAME_LOWER}.sh/auth/full_stripe_profile"
        headers = Config.BASE_HEADERS.copy()
        headers.update({"Authorization": f"Bearer {token}"})
        try:
            proxies = UsageManager.get_proxy()
            response = requests.get(url, headers=headers, timeout=10, proxies=proxies)
            response.raise_for_status()
            return response.json()
        except Exception:
            return None

def get_token_from_session(session_path):
    """L·∫•y token t·ª´ session"""
    if not session_path or not os.path.exists(session_path):
        return None

    try:
        # Th·ª≠ t√¨m t·∫•t c·∫£ c√°c file session c√≥ th·ªÉ
        import re
        for file in os.listdir(session_path):
            if file.endswith('.log'):
                file_path = os.path.join(session_path, file)
                try:
                    with open(file_path, 'rb') as f:
                        content = f.read().decode('utf-8', errors='ignore')
                        # T√¨m m·∫´u token
                        token_match = re.search(r'"token":"([^"]+)"', content)
                        if token_match:
                            return token_match.group(1)
                except:
                    continue
    except Exception as e:
        print(f"L·ªói khi l·∫•y token t·ª´ session: {str(e)}")

    return None

def get_token():
    """L·∫•y token Cursor"""
    paths = get_cursor_paths()
    if not paths:
        return None

    # Th·ª≠ l·∫•y token t·ª´ c∆° s·ªü d·ªØ li·ªáu SQLite
    token = get_token_from_sqlite(paths.get('sqlite_path', ''))
    if token:
        return token

    # Th·ª≠ l·∫•y token t·ª´ file storage.json
    token = get_token_from_storage(paths.get('storage_path', ''))
    if token:
        return token

    # Th·ª≠ l·∫•y token t·ª´ session
    session_path = os.path.join(os.path.dirname(paths.get('storage_path', '')), "Session Storage")
    token = get_token_from_session(session_path)
    if token:
        return token

    return None

def get_token_from_storage(storage_path):
    """L·∫•y token t·ª´ file storage.json"""
    if not storage_path or not os.path.exists(storage_path):
        return None

    try:
        with open(storage_path, 'r', encoding='utf-8', errors='ignore') as f:
            data = json.load(f)

            # Th·ª≠ l·∫•y accessToken
            if 'cursorAuth/accessToken' in data:
                return data['cursorAuth/accessToken']

            # Th·ª≠ l·∫•y cursor.token
            if 'cursor.token' in data:
                return data['cursor.token']

            # Th·ª≠ c√°c kh√≥a kh√°c c√≥ th·ªÉ
            for key in data:
                if 'token' in key.lower() and isinstance(data[key], str) and len(data[key]) > 20:
                    return data[key]
    except Exception as e:
        print(f"L·ªói khi l·∫•y token t·ª´ storage.json: {str(e)}")

    return None

def get_token_from_sqlite(sqlite_path):
    """L·∫•y token t·ª´ c∆° s·ªü d·ªØ li·ªáu SQLite"""
    if not sqlite_path or not os.path.exists(sqlite_path):
        return None

    try:
        conn = sqlite3.connect(sqlite_path)
        cursor = conn.cursor()

        # Th·ª≠ l·∫•y t·ª´ cursorAuth/accessToken
        cursor.execute("SELECT value FROM ItemTable WHERE key = 'cursorAuth/accessToken'")
        result = cursor.fetchone()
        if result:
            try:
                return json.loads(result[0])
            except:
                return result[0] if isinstance(result[0], str) else None

        # Th·ª≠ l·∫•y t·ª´ cursor.token
        cursor.execute("SELECT value FROM ItemTable WHERE key = 'cursor.token'")
        result = cursor.fetchone()
        if result:
            try:
                return json.loads(result[0])
            except:
                return result[0] if isinstance(result[0], str) else None

        # Th·ª≠ t√¨m t·∫•t c·∫£ c√°c key ch·ª©a token
        cursor.execute("SELECT key, value FROM ItemTable WHERE key LIKE '%token%'")
        rows = cursor.fetchall()
        conn.close()

        for row in rows:
            try:
                key, value = row
                if isinstance(value, str) and len(value) > 20:
                    return value

                # Th·ª≠ ph√¢n t√≠ch JSON
                try:
                    data = json.loads(value)
                    if isinstance(data, dict) and 'token' in data:
                        return data['token']
                except:
                    pass
            except:
                continue
    except Exception as e:
        print(f"L·ªói khi l·∫•y token t·ª´ SQLite: {str(e)}")

    return None

def get_email_from_storage(storage_path):
    """L·∫•y email t·ª´ file storage.json"""
    if not storage_path or not os.path.exists(storage_path):
        return None

    try:
        with open(storage_path, 'r', encoding='utf-8', errors='ignore') as f:
            data = json.load(f)

            # Ki·ªÉm tra c√°c kh√≥a c√≥ th·ªÉ ch·ª©a email
            for key in data:
                if 'email' in key.lower():
                    value = data[key]
                    if isinstance(value, str) and '@' in value:
                        return value
    except Exception:
        pass

    return None

def get_email_from_sqlite(sqlite_path):
    """L·∫•y email t·ª´ c∆° s·ªü d·ªØ li·ªáu SQLite"""
    if not sqlite_path or not os.path.exists(sqlite_path):
        return None

    try:
        conn = sqlite3.connect(sqlite_path)
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM ItemTable WHERE key LIKE '%email%' OR key LIKE '%cursorAuth%'")
        rows = cursor.fetchall()
        conn.close()

        for row in rows:
            try:
                value = row[0]
                # N·∫øu l√† chu·ªói v√† ch·ª©a @, c√≥ th·ªÉ l√† email
                if isinstance(value, str) and '@' in value:
                    return value

                # Th·ª≠ ph√¢n t√≠ch JSON
                try:
                    data = json.loads(value)
                    if isinstance(data, dict):
                        # Ki·ªÉm tra xem c√≥ tr∆∞·ªùng email kh√¥ng
                        if 'email' in data:
                            return data['email']
                        # Ki·ªÉm tra xem c√≥ tr∆∞·ªùng cachedEmail kh√¥ng
                        if 'cachedEmail' in data:
                            return data['cachedEmail']
                except:
                    pass
            except:
                continue
    except Exception:
        pass

    return None

def format_subscription_type(subscription_data):
    """ƒê·ªãnh d·∫°ng lo·∫°i ƒëƒÉng k√Ω"""
    if not subscription_data:
        return "Free"

    # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi API m·ªõi
    if "membershipType" in subscription_data:
        membership_type = subscription_data.get("membershipType", "").lower()
        subscription_status = subscription_data.get("subscriptionStatus", "").lower()

        if subscription_status == "active":
            if membership_type == "pro":
                return "Pro"
            elif membership_type == "free_trial":
                return "Free Trial"
            elif membership_type == "pro_trial":
                return "Pro Trial"
            elif membership_type == "team":
                return "Team"
            elif membership_type == "enterprise":
                return "Enterprise"
            elif membership_type:
                return membership_type.capitalize()
            else:
                return "Active Subscription"
        elif subscription_status:
            return f"{membership_type.capitalize()} ({subscription_status})"

    # T∆∞∆°ng th√≠ch v·ªõi ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi API c≈©
    subscription = subscription_data.get("subscription")
    if subscription:
        plan = subscription.get("plan", {}).get("nickname", "Unknown")
        status = subscription.get("status", "unknown")

        if status == "active":
            if "pro" in plan.lower():
                return "Pro"
            elif "pro_trial" in plan.lower():
                return "Pro Trial"
            elif "free_trial" in plan.lower():
                return "Free Trial"
            elif "team" in plan.lower():
                return "Team"
            elif "enterprise" in plan.lower():
                return "Enterprise"
            else:
                return plan
        else:
            return f"{plan} ({status})"

    return "Free"

def display_account_info_frame(frame):
    """Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n trong frame"""
    import tkinter as tk

    # X√≥a t·∫•t c·∫£ widget con trong frame
    for widget in frame.winfo_children():
        widget.destroy()

    # L·∫•y token
    token = get_token()
    if not token:
        label = tk.Label(
            frame,
            text="Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p v√†o Cursor tr∆∞·ªõc.",
            font=("MS Sans Serif", 8, "bold"),  # Font Win95
            fg="#800000",  # ƒê·ªè ƒë·∫≠m Win95
            bg=RETRO_COLORS["win95_bg"],
            padx=10,
            pady=5,
            relief=tk.FLAT
        )
        label.pack(pady=5)
        return

    # L·∫•y ƒë∆∞·ªùng d·∫´n
    paths = get_cursor_paths()
    if not paths:
        label = tk.Label(
            frame,
            text="Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh.",
            font=("MS Sans Serif", 8, "bold"),  # Font Win95
            fg="#800000",  # ƒê·ªè ƒë·∫≠m Win95
            bg=RETRO_COLORS["win95_bg"],
            padx=10,
            pady=5,
            relief=tk.FLAT
        )
        label.pack(pady=5)
        return

    # L·∫•y th√¥ng tin email - th·ª≠ nhi·ªÅu ngu·ªìn
    email = get_email_from_storage(paths.get('storage_path', ''))

    # N·∫øu kh√¥ng t√¨m th·∫•y trong storage, th·ª≠ t·ª´ sqlite
    if not email:
        email = get_email_from_sqlite(paths.get('sqlite_path', ''))

    # L·∫•y th√¥ng tin ƒëƒÉng k√Ω
    try:
        subscription_info = UsageManager.get_stripe_profile(token)
    except Exception:
        subscription_info = None

    # N·∫øu kh√¥ng t√¨m th·∫•y trong storage v√† sqlite, th·ª≠ t·ª´ th√¥ng tin ƒëƒÉng k√Ω
    if not email and subscription_info:
        # Th·ª≠ l·∫•y email t·ª´ th√¥ng tin ƒëƒÉng k√Ω
        if 'customer' in subscription_info and 'email' in subscription_info['customer']:
            email = subscription_info['customer']['email']

    # L·∫•y th√¥ng tin s·ª≠ d·ª•ng - x·ª≠ l√Ω l·ªói m·ªôt c√°ch im l·∫∑ng
    try:
        usage_info = UsageManager.get_usage(token)
    except Exception:
        usage_info = None

    # Container frame cho c·∫£ th√¥ng tin t√†i kho·∫£n
    container_frame = tk.Frame(
        frame, 
        bg=RETRO_COLORS["win95_bg"],
        relief=tk.FLAT
    )
    container_frame.pack(fill=tk.X, padx=5, pady=5)
    
    # Frame cho th√¥ng tin t√†i kho·∫£n b√™n tr√°i - Win95 style
    info_frame = tk.Frame(
        container_frame, 
        bg=RETRO_COLORS["win95_bg"],
        relief=tk.RIDGE,  # Vi·ªÅn ki·ªÉu Win95
        bd=1
    )
    info_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))

    # T·∫°o ti√™u ƒë·ªÅ mini gi·ªëng c·ª≠a s·ªï Win95
    title_frame = tk.Frame(
        info_frame, 
        bg=RETRO_COLORS["win95_titlebar"],
        height=18
    )
    title_frame.pack(fill=tk.X, side=tk.TOP)
    
    title_label = tk.Label(
        title_frame,
        text=" Th√¥ng tin t√†i kho·∫£n",
        font=("MS Sans Serif", 8, "bold"),
        bg=RETRO_COLORS["win95_titlebar"],
        fg=RETRO_COLORS["win95_titlebar_text"],
        anchor="w"
    )
    title_label.pack(side=tk.LEFT, fill=tk.Y)
    
    # N√∫t ƒë√≥ng gi·∫£ - gi·ªëng Windows 95
    close_button = tk.Label(
        title_frame,
        text=" √ó ",
        font=("MS Sans Serif", 8, "bold"),
        bg=RETRO_COLORS["win95_titlebar"],
        fg=RETRO_COLORS["win95_titlebar_text"]
    )
    close_button.pack(side=tk.RIGHT)
    
    # Frame n·ªôi dung
    content_frame = tk.Frame(
        info_frame, 
        bg=RETRO_COLORS["win95_bg"],
        padx=5,
        pady=5
    )
    content_frame.pack(fill=tk.X, side=tk.TOP)

    # Hi·ªÉn th·ªã email
    if email:
        email_frame = tk.Frame(content_frame, bg=RETRO_COLORS["win95_bg"])
        email_frame.pack(fill=tk.X, pady=2)
        
        email_icon = tk.Label(
            email_frame,
            text="üìß",
            font=("MS Sans Serif", 8),
            bg=RETRO_COLORS["win95_bg"]
        )
        email_icon.pack(side=tk.LEFT, padx=(0, 5))
        
        email_label = tk.Label(
            email_frame,
            text=f"Email: {email}",
            font=("MS Sans Serif", 8),
            fg=RETRO_COLORS["win95_text"],
            bg=RETRO_COLORS["win95_bg"],
            anchor="w"
        )
        email_label.pack(side=tk.LEFT, fill=tk.X)
    else:
        email_frame = tk.Frame(content_frame, bg=RETRO_COLORS["win95_bg"])
        email_frame.pack(fill=tk.X, pady=2)
        
        email_icon = tk.Label(
            email_frame,
            text="‚ö†Ô∏è",
            font=("MS Sans Serif", 8),
            bg=RETRO_COLORS["win95_bg"]
        )
        email_icon.pack(side=tk.LEFT, padx=(0, 5))
        
        email_label = tk.Label(
            email_frame,
            text="Email: Kh√¥ng t√¨m th·∫•y",
            font=("MS Sans Serif", 8),
            fg="#800000",  # ƒê·ªè ƒë·∫≠m Win95
            bg=RETRO_COLORS["win95_bg"],
            anchor="w"
        )
        email_label.pack(side=tk.LEFT, fill=tk.X)

    # Hi·ªÉn th·ªã lo·∫°i ƒëƒÉng k√Ω
    plan_frame = tk.Frame(content_frame, bg=RETRO_COLORS["win95_bg"])
    plan_frame.pack(fill=tk.X, pady=2)
    
    if subscription_info:
        subscription_type = format_subscription_type(subscription_info)
        
        plan_icon = tk.Label(
            plan_frame,
            text="üî∞",
            font=("MS Sans Serif", 8),
            bg=RETRO_COLORS["win95_bg"]
        )
        plan_icon.pack(side=tk.LEFT, padx=(0, 5))
        
        subscription_label = tk.Label(
            plan_frame,
            text=f"G√≥i: {subscription_type}",
            font=("MS Sans Serif", 8),
            fg=RETRO_COLORS["win95_text"],
            bg=RETRO_COLORS["win95_bg"],
            anchor="w"
        )
        subscription_label.pack(side=tk.LEFT, fill=tk.X)

        # Hi·ªÉn th·ªã s·ªë ng√†y c√≤n l·∫°i c·ªßa b·∫£n d√πng th·ª≠
        days_remaining = subscription_info.get("daysRemainingOnTrial")
        if days_remaining is not None and days_remaining > 0:
            trial_frame = tk.Frame(content_frame, bg=RETRO_COLORS["win95_bg"])
            trial_frame.pack(fill=tk.X, pady=2)
            
            trial_icon = tk.Label(
                trial_frame,
                text="‚è±Ô∏è",
                font=("MS Sans Serif", 8),
                bg=RETRO_COLORS["win95_bg"]
            )
            trial_icon.pack(side=tk.LEFT, padx=(0, 5))
            
            trial_label = tk.Label(
                trial_frame,
                text=f"C√≤n l·∫°i: {days_remaining} ng√†y",
                font=("MS Sans Serif", 8),
                fg=RETRO_COLORS["win95_text"],
                bg=RETRO_COLORS["win95_bg"],
                anchor="w"
            )
            trial_label.pack(side=tk.LEFT, fill=tk.X)
    else:
        plan_icon = tk.Label(
            plan_frame,
            text="üî∞",
            font=("MS Sans Serif", 8),
            bg=RETRO_COLORS["win95_bg"]
        )
        plan_icon.pack(side=tk.LEFT, padx=(0, 5))
        
        subscription_label = tk.Label(
            plan_frame,
            text="G√≥i: Free",
            font=("MS Sans Serif", 8),
            fg=RETRO_COLORS["win95_text"],
            bg=RETRO_COLORS["win95_bg"],
            anchor="w"
        )
        subscription_label.pack(side=tk.LEFT, fill=tk.X)

    # Hi·ªÉn th·ªã th√¥ng tin s·ª≠ d·ª•ng ·ªü b√™n ph·∫£i
    if usage_info:
        # Frame th√¥ng tin s·ª≠ d·ª•ng b√™n ph·∫£i
        usage_frame = tk.Frame(
            container_frame, 
            bg=RETRO_COLORS["win95_bg"],
            relief=tk.RIDGE,  # Vi·ªÅn ki·ªÉu Win95
            bd=1
        )
        usage_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # T·∫°o ti√™u ƒë·ªÅ mini gi·ªëng c·ª≠a s·ªï Win95
        usage_title_frame = tk.Frame(
            usage_frame, 
            bg=RETRO_COLORS["win95_titlebar"],
            height=18
        )
        usage_title_frame.pack(fill=tk.X, side=tk.TOP)
        
        usage_title_label = tk.Label(
            usage_title_frame,
            text=" Th√¥ng tin s·ª≠ d·ª•ng",
            font=("MS Sans Serif", 8, "bold"),
            bg=RETRO_COLORS["win95_titlebar"],
            fg=RETRO_COLORS["win95_titlebar_text"],
            anchor="w"
        )
        usage_title_label.pack(side=tk.LEFT, fill=tk.Y)
        
        # N√∫t ƒë√≥ng gi·∫£ - gi·ªëng Windows 95
        usage_close_button = tk.Label(
            usage_title_frame,
            text=" √ó ",
            font=("MS Sans Serif", 8, "bold"),
            bg=RETRO_COLORS["win95_titlebar"],
            fg=RETRO_COLORS["win95_titlebar_text"]
        )
        usage_close_button.pack(side=tk.RIGHT)
        
        # Frame n·ªôi dung s·ª≠ d·ª•ng
        usage_content_frame = tk.Frame(
            usage_frame, 
            bg=RETRO_COLORS["win95_bg"],
            padx=5,
            pady=5
        )
        usage_content_frame.pack(fill=tk.BOTH, expand=True)

        # S·ª≠ d·ª•ng Premium
        premium_usage = usage_info.get('premium_usage', 0)
        max_premium_usage = usage_info.get('max_premium_usage', "Kh√¥ng gi·ªõi h·∫°n")

        # ƒê·∫£m b·∫£o gi√° tr·ªã kh√¥ng ph·∫£i None
        if premium_usage is None:
            premium_usage = 0

        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p "Kh√¥ng gi·ªõi h·∫°n"
        if isinstance(max_premium_usage, str) and max_premium_usage == "Kh√¥ng gi·ªõi h·∫°n":
            premium_color = "#008000"  # Green
            premium_display = f"{premium_usage}/{max_premium_usage}"
        else:
            # T√≠nh ph·∫ßn trƒÉm khi gi√° tr·ªã l√† s·ªë
            if max_premium_usage is None or max_premium_usage == 0:
                max_premium_usage = 999
                premium_percentage = 0
            else:
                premium_percentage = (premium_usage / max_premium_usage) * 100

            # Ch·ªçn m√†u d·ª±a tr√™n ph·∫ßn trƒÉm s·ª≠ d·ª•ng
            premium_color = "#008000"  # Green
            if premium_percentage > 70:
                premium_color = "#FFA500"  # Orange
            if premium_percentage > 90:
                premium_color = "#800000"  # ƒê·ªè ƒë·∫≠m Win95

            premium_display = f"{premium_usage}/{max_premium_usage} ({premium_percentage:.1f}%)"

        premium_frame = tk.Frame(usage_content_frame, bg=RETRO_COLORS["win95_bg"])
        premium_frame.pack(fill=tk.X, pady=1)
        
        premium_icon = tk.Label(
            premium_frame,
            text="‚≠ê",
            font=("MS Sans Serif", 8),
            bg=RETRO_COLORS["win95_bg"]
        )
        premium_icon.pack(side=tk.LEFT, padx=(0, 5))
        
        premium_label = tk.Label(
            premium_frame,
            text=f"Fast Response: {premium_display}",
            font=("MS Sans Serif", 8),
            fg=premium_color,
            bg=RETRO_COLORS["win95_bg"],
            anchor="w"
        )
        premium_label.pack(side=tk.LEFT, fill=tk.X)

        # S·ª≠ d·ª•ng Basic
        basic_usage = usage_info.get('basic_usage', 0)
        max_basic_usage = usage_info.get('max_basic_usage', "Kh√¥ng gi·ªõi h·∫°n")

        # ƒê·∫£m b·∫£o gi√° tr·ªã kh√¥ng ph·∫£i None
        if basic_usage is None:
            basic_usage = 0

        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p "Kh√¥ng gi·ªõi h·∫°n"
        if isinstance(max_basic_usage, str) and max_basic_usage == "Kh√¥ng gi·ªõi h·∫°n":
            basic_color = "#008000"  # Green
            basic_display = f"{basic_usage}/{max_basic_usage}"
        else:
            # T√≠nh ph·∫ßn trƒÉm khi gi√° tr·ªã l√† s·ªë
            if max_basic_usage is None or max_basic_usage == 0:
                max_basic_usage = 999
                basic_percentage = 0
            else:
                basic_percentage = (basic_usage / max_basic_usage) * 100

            # Ch·ªçn m√†u d·ª±a tr√™n ph·∫ßn trƒÉm s·ª≠ d·ª•ng
            basic_color = "#008000"  # Green
            if basic_percentage > 70:
                basic_color = "#FFA500"  # Orange
            if basic_percentage > 90:
                basic_color = "#800000"  # ƒê·ªè ƒë·∫≠m Win95

            basic_display = f"{basic_usage}/{max_basic_usage} ({basic_percentage:.1f}%)"

        basic_frame = tk.Frame(usage_content_frame, bg=RETRO_COLORS["win95_bg"])
        basic_frame.pack(fill=tk.X, pady=1)
        
        basic_icon = tk.Label(
            basic_frame,
            text="üîÑ",
            font=("MS Sans Serif", 8),
            bg=RETRO_COLORS["win95_bg"]
        )
        basic_icon.pack(side=tk.LEFT, padx=(0, 5))
        
        basic_label = tk.Label(
            basic_frame,
            text=f"Slow Response: {basic_display}",
            font=("MS Sans Serif", 8),
            fg=basic_color,
            bg=RETRO_COLORS["win95_bg"],
            anchor="w"
        )
        basic_label.pack(side=tk.LEFT, fill=tk.X)
        
        # T·∫°o thanh ti·∫øn tr√¨nh ki·ªÉu Windows 95
        progress_frame = tk.Frame(
            usage_content_frame, 
            bg=RETRO_COLORS["win95_bg"],
            relief=tk.SUNKEN,
            bd=1,
            height=15
        )
        progress_frame.pack(fill=tk.X, pady=5)
        
        # T√≠nh ph·∫ßn trƒÉm s·ª≠ d·ª•ng Premium n·∫øu c√≥
        if isinstance(max_premium_usage, int) and max_premium_usage > 0:
            premium_percentage = min(100, (premium_usage / max_premium_usage) * 100)
            
            # T·∫°o thanh ti·∫øn tr√¨nh
            def update_progress(progress_frame=progress_frame, width_percent=premium_percentage):
                width = int((width_percent / 100) * progress_frame.winfo_width())
                progress_bar = tk.Frame(
                    progress_frame,
                    bg=RETRO_COLORS["win95_titlebar"],
                    height=13
                )
                progress_bar.place(x=1, y=1, width=width, height=13)
            
            # C·∫≠p nh·∫≠t khi c·ª≠a s·ªï thay ƒë·ªïi k√≠ch th∆∞·ªõc
            progress_frame.bind("<Configure>", lambda e: update_progress())
            
            # C·∫≠p nh·∫≠t l·∫ßn ƒë·∫ßu sau khi c·ª≠a s·ªï ƒë∆∞·ª£c hi·ªÉn th·ªã
            progress_frame.after(100, update_progress)

def display_account_info():
    """Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n trong terminal"""
    print(f"\n{Fore.CYAN}{'='*50}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{ACCOUNT_EMOJI['USER']} Th√¥ng tin t√†i kho·∫£n Cursor{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'='*50}{Style.RESET_ALL}")

    # L·∫•y token
    token = get_token()
    if not token:
        print(f"{Fore.RED}{ACCOUNT_EMOJI['ERROR']} Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p v√†o Cursor tr∆∞·ªõc.{Style.RESET_ALL}")
        return

    # L·∫•y ƒë∆∞·ªùng d·∫´n
    paths = get_cursor_paths()
    if not paths:
        print(f"{Fore.RED}{ACCOUNT_EMOJI['ERROR']} Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh.{Style.RESET_ALL}")
        return

    # L·∫•y th√¥ng tin email - th·ª≠ nhi·ªÅu ngu·ªìn
    email = get_email_from_storage(paths['storage_path'])

    # N·∫øu kh√¥ng t√¨m th·∫•y trong storage, th·ª≠ t·ª´ sqlite
    if not email:
        email = get_email_from_sqlite(paths['sqlite_path'])

    # L·∫•y th√¥ng tin ƒëƒÉng k√Ω
    try:
        subscription_info = UsageManager.get_stripe_profile(token)
    except Exception:
        subscription_info = None

    # N·∫øu kh√¥ng t√¨m th·∫•y trong storage v√† sqlite, th·ª≠ t·ª´ th√¥ng tin ƒëƒÉng k√Ω
    if not email and subscription_info:
        # Th·ª≠ l·∫•y email t·ª´ th√¥ng tin ƒëƒÉng k√Ω
        if 'customer' in subscription_info and 'email' in subscription_info['customer']:
            email = subscription_info['customer']['email']

    # L·∫•y th√¥ng tin s·ª≠ d·ª•ng - x·ª≠ l√Ω l·ªói m·ªôt c√°ch im l·∫∑ng
    try:
        usage_info = UsageManager.get_usage(token)
    except Exception:
        usage_info = None

    # Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n
    if email:
        print(f"{Fore.GREEN}{ACCOUNT_EMOJI['EMAIL']} Email: {Fore.WHITE}{email}{Style.RESET_ALL}")
    else:
        print(f"{Fore.YELLOW}{ACCOUNT_EMOJI['WARNING']} Email kh√¥ng t√¨m th·∫•y{Style.RESET_ALL}")

    # Hi·ªÉn th·ªã lo·∫°i ƒëƒÉng k√Ω
    if subscription_info:
        subscription_type = format_subscription_type(subscription_info)
        print(f"{Fore.GREEN}{ACCOUNT_EMOJI['PLAN']} G√≥i: {Fore.WHITE}{subscription_type}{Style.RESET_ALL}")

        # Hi·ªÉn th·ªã s·ªë ng√†y c√≤n l·∫°i c·ªßa b·∫£n d√πng th·ª≠
        days_remaining = subscription_info.get("daysRemainingOnTrial")
        if days_remaining is not None and days_remaining > 0:
            print(f"{Fore.GREEN}{ACCOUNT_EMOJI['TIME']} C√≤n l·∫°i: {Fore.WHITE}{days_remaining} ng√†y{Style.RESET_ALL}")
    else:
        print(f"{Fore.YELLOW}{ACCOUNT_EMOJI['WARNING']} Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω{Style.RESET_ALL}")

    # Hi·ªÉn th·ªã th√¥ng tin s·ª≠ d·ª•ng
    if usage_info:
        print(f"\n{Fore.GREEN}{ACCOUNT_EMOJI['USAGE']} Th·ªëng k√™ s·ª≠ d·ª•ng:{Style.RESET_ALL}")

        # S·ª≠ d·ª•ng Premium
        premium_usage = usage_info.get('premium_usage', 0)
        max_premium_usage = usage_info.get('max_premium_usage', "Kh√¥ng gi·ªõi h·∫°n")

        # ƒê·∫£m b·∫£o gi√° tr·ªã kh√¥ng ph·∫£i None
        if premium_usage is None:
            premium_usage = 0

        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p "Kh√¥ng gi·ªõi h·∫°n"
        if isinstance(max_premium_usage, str) and max_premium_usage == "Kh√¥ng gi·ªõi h·∫°n":
            premium_color = Fore.GREEN  # Khi kh√¥ng c√≥ gi·ªõi h·∫°n, s·ª≠ d·ª•ng m√†u xanh l√°
            premium_display = f"{premium_usage}/{max_premium_usage}"
        else:
            # T√≠nh ph·∫ßn trƒÉm khi gi√° tr·ªã l√† s·ªë
            if max_premium_usage is None or max_premium_usage == 0:
                max_premium_usage = 999
                premium_percentage = 0
            else:
                premium_percentage = (premium_usage / max_premium_usage) * 100

            # Ch·ªçn m√†u d·ª±a tr√™n ph·∫ßn trƒÉm s·ª≠ d·ª•ng
            premium_color = Fore.GREEN
            if premium_percentage > 70:
                premium_color = Fore.YELLOW
            if premium_percentage > 90:
                premium_color = Fore.RED

            premium_display = f"{premium_usage}/{max_premium_usage} ({premium_percentage:.1f}%)"

        print(f"{Fore.BLUE}{ACCOUNT_EMOJI['PREMIUM']} Fast Response: {premium_color}{premium_display}{Style.RESET_ALL}")

        # S·ª≠ d·ª•ng Basic
        basic_usage = usage_info.get('basic_usage', 0)
        max_basic_usage = usage_info.get('max_basic_usage', "Kh√¥ng gi·ªõi h·∫°n")

        # ƒê·∫£m b·∫£o gi√° tr·ªã kh√¥ng ph·∫£i None
        if basic_usage is None:
            basic_usage = 0

        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p "Kh√¥ng gi·ªõi h·∫°n"
        if isinstance(max_basic_usage, str) and max_basic_usage == "Kh√¥ng gi·ªõi h·∫°n":
            basic_color = Fore.GREEN  # Khi kh√¥ng c√≥ gi·ªõi h·∫°n, s·ª≠ d·ª•ng m√†u xanh l√°
            basic_display = f"{basic_usage}/{max_basic_usage}"
        else:
            # T√≠nh ph·∫ßn trƒÉm khi gi√° tr·ªã l√† s·ªë
            if max_basic_usage is None or max_basic_usage == 0:
                max_basic_usage = 999
                basic_percentage = 0
            else:
                basic_percentage = (basic_usage / max_basic_usage) * 100

            # Ch·ªçn m√†u d·ª±a tr√™n ph·∫ßn trƒÉm s·ª≠ d·ª•ng
            basic_color = Fore.GREEN
            if basic_percentage > 70:
                basic_color = Fore.YELLOW
            if basic_percentage > 90:
                basic_color = Fore.RED

            basic_display = f"{basic_usage}/{max_basic_usage} ({basic_percentage:.1f}%)"

        print(f"{Fore.BLUE}{ACCOUNT_EMOJI['BASIC']} Slow Response: {basic_color}{basic_display}{Style.RESET_ALL}")

def run():
    """H√†m ch·∫°y ch√≠nh"""
    display_account_info()

if __name__ == "__main__":
    run()
