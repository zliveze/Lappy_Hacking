# build_advanced.ps1 - Advanced build script cho Lappy Lab 4.1

param(
    [switch]$Clean,
    [switch]$Installer,
    [switch]$Quick,
    [switch]$Help
)

# Colors
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Cyan = "Cyan"
$Magenta = "Magenta"

function Write-Header {
    Write-Host "========================================" -ForegroundColor $Cyan
    Write-Host "üèóÔ∏è Lappy Lab 4.1 - Advanced Build Script" -ForegroundColor $Cyan
    Write-Host "========================================" -ForegroundColor $Cyan
    Write-Host ""
}

function Write-Success {
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor $Green
}

function Write-Error {
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor $Red
}

function Write-Warning {
    param($Message)
    Write-Host "‚ö†Ô∏è $Message" -ForegroundColor $Yellow
}

function Write-Info {
    param($Message)
    Write-Host "‚ÑπÔ∏è $Message" -ForegroundColor $Cyan
}

function Show-Help {
    Write-Header
    Write-Host "üìã C√ÅCH S·ª¨ D·ª§NG:" -ForegroundColor $Magenta
    Write-Host ""
    Write-Host "  .\build_advanced.ps1                # Build th√¥ng th∆∞·ªùng"
    Write-Host "  .\build_advanced.ps1 -Clean         # Build + Clean"
    Write-Host "  .\build_advanced.ps1 -Installer     # Build + Installer"
    Write-Host "  .\build_advanced.ps1 -Quick         # Quick build (auto)"
    Write-Host "  .\build_advanced.ps1 -Help          # Hi·ªÉn th·ªã help"
    Write-Host ""
    Write-Host "üì¶ OUTPUT:" -ForegroundColor $Magenta
    Write-Host "  - dist/LappyLab.exe                 # Executable file"
    Write-Host "  - LappyLab_Setup.exe                # Installer (n·∫øu c√≥ -Installer)"
    Write-Host ""
    Write-Host "üé® ICON:" -ForegroundColor $Magenta
    Write-Host "  - T·ª± ƒë·ªông s·ª≠ d·ª•ng: public/image/icon.ico"
    Write-Host ""
}

function Test-Requirements {
    Write-Info "Ki·ªÉm tra requirements..."
    
    # Ki·ªÉm tra Python
    try {
        $pythonVersion = python --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Python: $pythonVersion"
        } else {
            Write-Error "Python kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!"
            return $false
        }
    } catch {
        Write-Error "Python kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!"
        return $false
    }
    
    # Ki·ªÉm tra PyInstaller
    try {
        python -c "import PyInstaller; print('PyInstaller version:', PyInstaller.__version__)" 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Success "PyInstaller ƒë√£ s·∫µn s√†ng"
        } else {
            Write-Warning "PyInstaller ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
            Write-Info "ƒêang c√†i ƒë·∫∑t PyInstaller..."
            pip install pyinstaller
            if ($LASTEXITCODE -eq 0) {
                Write-Success "PyInstaller ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
            } else {
                Write-Error "Kh√¥ng th·ªÉ c√†i ƒë·∫∑t PyInstaller"
                return $false
            }
        }
    } catch {
        Write-Error "L·ªói ki·ªÉm tra PyInstaller"
        return $false
    }
    
    # Ki·ªÉm tra icon
    if (Test-Path "public/image/icon.ico") {
        Write-Success "Icon t√¨m th·∫•y: public/image/icon.ico"
    } else {
        Write-Warning "Kh√¥ng t√¨m th·∫•y icon"
    }
    
    return $true
}

function Start-Build {
    Write-Info "B·∫Øt ƒë·∫ßu build executable..."
    Write-Host "‚è≥ Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t..." -ForegroundColor $Yellow
    Write-Host ""
    
    # Ch·∫°y build script
    python build.py
    
    # Ki·ªÉm tra k·∫øt qu·∫£
    if (Test-Path "dist/LappyLab.exe") {
        $size = (Get-Item "dist/LappyLab.exe").Length
        $sizeMB = [math]::Round($size / 1MB, 1)
        Write-Success "Build th√†nh c√¥ng!"
        Write-Success "File: dist/LappyLab.exe ($sizeMB MB)"
        return $true
    } else {
        Write-Error "Build th·∫•t b·∫°i!"
        return $false
    }
}

function Start-QuickBuild {
    Write-Info "Quick Build Mode - T·ª± ƒë·ªông build + clean"
    
    if (-not (Test-Requirements)) {
        return $false
    }
    
    if (Start-Build) {
        Write-Info "D·ªçn d·∫πp files t·∫°m..."
        python -c "from build import clean_build_files; clean_build_files()"
        Write-Success "Quick build ho√†n t·∫•t!"
        return $true
    }
    
    return $false
}

# Main logic
if ($Help) {
    Show-Help
    exit 0
}

Write-Header

if ($Quick) {
    $success = Start-QuickBuild
} else {
    if (-not (Test-Requirements)) {
        Write-Error "Requirements kh√¥ng ƒë·ªß!"
        exit 1
    }
    
    $success = Start-Build
    
    if ($success -and $Clean) {
        Write-Info "D·ªçn d·∫πp files t·∫°m..."
        python -c "from build import clean_build_files; clean_build_files()"
    }
    
    if ($success -and $Installer) {
        Write-Info "T·∫°o installer..."
        python -c "from build import create_installer; create_installer()"
    }
}

Write-Host ""
Write-Host "========================================" -ForegroundColor $Cyan
if ($success) {
    Write-Host "üéâ BUILD HO√ÄN T·∫§T!" -ForegroundColor $Green
    Write-Host "üöÄ C√≥ th·ªÉ ch·∫°y: dist/LappyLab.exe" -ForegroundColor $Green
} else {
    Write-Host "‚ùå BUILD TH·∫§T B·∫†I!" -ForegroundColor $Red
}
Write-Host "========================================" -ForegroundColor $Cyan

# M·ªü th∆∞ m·ª•c dist n·∫øu build th√†nh c√¥ng
if ($success -and (Test-Path "dist")) {
    $choice = Read-Host "B·∫°n c√≥ mu·ªën m·ªü th∆∞ m·ª•c dist? (y/N)"
    if ($choice -eq "y" -or $choice -eq "Y") {
        Start-Process "explorer" -ArgumentList "dist"
    }
}
